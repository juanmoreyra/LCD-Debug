
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a30  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063dc  080063dc  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080063dc  080063dc  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063dc  080063dc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080063e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021d4  20000018  080063fc  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ec  080063fc  000221ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016324  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b2  00000000  00000000  00036365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00039418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  0003a8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c4c  00000000  00000000  0003bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166ad  00000000  00000000  00054894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938df  00000000  00000000  0006af41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe820  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f0  00000000  00000000  000fe870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005b28 	.word	0x08005b28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005b28 	.word	0x08005b28

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fe78 	bl	8000e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f83a 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8fc 	bl	8000358 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000160:	f000 f87c 	bl	800025c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000164:	f000 f8a8 	bl	80002b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_I2C_Init();
  SSD1306_Init();
 8000168:	f000 fab6 	bl	80006d8 <SSD1306_Init>
  SSD1306_Clear();
 800016c:	f000 fcd7 	bl	8000b1e <SSD1306_Clear>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f002 ff1e 	bl	8002fb0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000174:	4a0d      	ldr	r2, [pc, #52]	; (80001ac <main+0x5c>)
 8000176:	2100      	movs	r1, #0
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <main+0x60>)
 800017a:	f002 ff7f 	bl	800307c <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0c      	ldr	r2, [pc, #48]	; (80001b4 <main+0x64>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of sensor */
  sensorHandle = osThreadNew(entrySensor1, NULL, &sensor_attributes);
 8000184:	4a0c      	ldr	r2, [pc, #48]	; (80001b8 <main+0x68>)
 8000186:	2100      	movs	r1, #0
 8000188:	480c      	ldr	r0, [pc, #48]	; (80001bc <main+0x6c>)
 800018a:	f002 ff77 	bl	800307c <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <main+0x70>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of NOMBRE */
  NOMBREHandle = osThreadNew(NombreApellido, NULL, &NOMBRE_attributes);
 8000194:	4a0b      	ldr	r2, [pc, #44]	; (80001c4 <main+0x74>)
 8000196:	2100      	movs	r1, #0
 8000198:	480b      	ldr	r0, [pc, #44]	; (80001c8 <main+0x78>)
 800019a:	f002 ff6f 	bl	800307c <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <main+0x7c>)
 80001a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001a4:	f002 ff36 	bl	8003014 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a8:	e7fe      	b.n	80001a8 <main+0x58>
 80001aa:	bf00      	nop
 80001ac:	08006330 	.word	0x08006330
 80001b0:	080005d5 	.word	0x080005d5
 80001b4:	200000d0 	.word	0x200000d0
 80001b8:	08006354 	.word	0x08006354
 80001bc:	08000629 	.word	0x08000629
 80001c0:	200000d4 	.word	0x200000d4
 80001c4:	08006378 	.word	0x08006378
 80001c8:	08000689 	.word	0x08000689
 80001cc:	200000d8 	.word	0x200000d8

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b090      	sub	sp, #64	; 0x40
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0318 	add.w	r3, r7, #24
 80001da:	2228      	movs	r2, #40	; 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f005 fc58 	bl	8005a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
 80001ea:	605a      	str	r2, [r3, #4]
 80001ec:	609a      	str	r2, [r3, #8]
 80001ee:	60da      	str	r2, [r3, #12]
 80001f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f2:	2301      	movs	r3, #1
 80001f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001fc:	2300      	movs	r3, #0
 80001fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000200:	2301      	movs	r3, #1
 8000202:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000204:	2302      	movs	r3, #2
 8000206:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800020c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fec9 	bl	8001fb0 <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000224:	f000 fa52 	bl	80006cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2102      	movs	r1, #2
 8000242:	4618      	mov	r0, r3
 8000244:	f002 f936 	bl	80024b4 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024e:	f000 fa3d 	bl	80006cc <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	; 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <MX_I2C1_Init+0x50>)
 8000262:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <MX_I2C1_Init+0x54>)
 8000264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000266:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_I2C1_Init+0x50>)
 8000268:	4a12      	ldr	r2, [pc, #72]	; (80002b4 <MX_I2C1_Init+0x58>)
 800026a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <MX_I2C1_Init+0x50>)
 800026e:	2200      	movs	r2, #0
 8000270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_I2C1_Init+0x50>)
 8000274:	2200      	movs	r2, #0
 8000276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_I2C1_Init+0x50>)
 800027a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800027e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <MX_I2C1_Init+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_I2C1_Init+0x50>)
 8000288:	2200      	movs	r2, #0
 800028a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <MX_I2C1_Init+0x50>)
 800028e:	2200      	movs	r2, #0
 8000290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000292:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_I2C1_Init+0x50>)
 8000294:	2200      	movs	r2, #0
 8000296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000298:	4804      	ldr	r0, [pc, #16]	; (80002ac <MX_I2C1_Init+0x50>)
 800029a:	f001 f911 	bl	80014c0 <HAL_I2C_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a4:	f000 fa12 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000034 	.word	0x20000034
 80002b0:	40005400 	.word	0x40005400
 80002b4:	00061a80 	.word	0x00061a80

080002b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <MX_TIM1_Init+0x98>)
 80002d6:	4a1f      	ldr	r2, [pc, #124]	; (8000354 <MX_TIM1_Init+0x9c>)
 80002d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80002da:	4b1d      	ldr	r3, [pc, #116]	; (8000350 <MX_TIM1_Init+0x98>)
 80002dc:	2247      	movs	r2, #71	; 0x47
 80002de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <MX_TIM1_Init+0x98>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	; (8000350 <MX_TIM1_Init+0x98>)
 80002e8:	2263      	movs	r2, #99	; 0x63
 80002ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_TIM1_Init+0x98>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_TIM1_Init+0x98>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_TIM1_Init+0x98>)
 80002fa:	2280      	movs	r2, #128	; 0x80
 80002fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002fe:	4814      	ldr	r0, [pc, #80]	; (8000350 <MX_TIM1_Init+0x98>)
 8000300:	f002 fa5c 	bl	80027bc <HAL_TIM_Base_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 800030a:	f000 f9df 	bl	80006cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000312:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000314:	f107 0308 	add.w	r3, r7, #8
 8000318:	4619      	mov	r1, r3
 800031a:	480d      	ldr	r0, [pc, #52]	; (8000350 <MX_TIM1_Init+0x98>)
 800031c:	f002 fbf8 	bl	8002b10 <HAL_TIM_ConfigClockSource>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 8000326:	f000 f9d1 	bl	80006cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000332:	463b      	mov	r3, r7
 8000334:	4619      	mov	r1, r3
 8000336:	4806      	ldr	r0, [pc, #24]	; (8000350 <MX_TIM1_Init+0x98>)
 8000338:	f002 fdca 	bl	8002ed0 <HAL_TIMEx_MasterConfigSynchronization>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000342:	f000 f9c3 	bl	80006cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	3718      	adds	r7, #24
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000088 	.word	0x20000088
 8000354:	40012c00 	.word	0x40012c00

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036c:	4b37      	ldr	r3, [pc, #220]	; (800044c <MX_GPIO_Init+0xf4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a36      	ldr	r2, [pc, #216]	; (800044c <MX_GPIO_Init+0xf4>)
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b34      	ldr	r3, [pc, #208]	; (800044c <MX_GPIO_Init+0xf4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0310 	and.w	r3, r3, #16
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000384:	4b31      	ldr	r3, [pc, #196]	; (800044c <MX_GPIO_Init+0xf4>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a30      	ldr	r2, [pc, #192]	; (800044c <MX_GPIO_Init+0xf4>)
 800038a:	f043 0320 	orr.w	r3, r3, #32
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	4b2e      	ldr	r3, [pc, #184]	; (800044c <MX_GPIO_Init+0xf4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	f003 0320 	and.w	r3, r3, #32
 8000398:	60bb      	str	r3, [r7, #8]
 800039a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	4b2b      	ldr	r3, [pc, #172]	; (800044c <MX_GPIO_Init+0xf4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	4a2a      	ldr	r2, [pc, #168]	; (800044c <MX_GPIO_Init+0xf4>)
 80003a2:	f043 0304 	orr.w	r3, r3, #4
 80003a6:	6193      	str	r3, [r2, #24]
 80003a8:	4b28      	ldr	r3, [pc, #160]	; (800044c <MX_GPIO_Init+0xf4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	f003 0304 	and.w	r3, r3, #4
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b4:	4b25      	ldr	r3, [pc, #148]	; (800044c <MX_GPIO_Init+0xf4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	4a24      	ldr	r2, [pc, #144]	; (800044c <MX_GPIO_Init+0xf4>)
 80003ba:	f043 0308 	orr.w	r3, r3, #8
 80003be:	6193      	str	r3, [r2, #24]
 80003c0:	4b22      	ldr	r3, [pc, #136]	; (800044c <MX_GPIO_Init+0xf4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	f003 0308 	and.w	r3, r3, #8
 80003c8:	603b      	str	r3, [r7, #0]
 80003ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	481f      	ldr	r0, [pc, #124]	; (8000450 <MX_GPIO_Init+0xf8>)
 80003d4:	f001 f843 	bl	800145e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	21c0      	movs	r1, #192	; 0xc0
 80003dc:	481d      	ldr	r0, [pc, #116]	; (8000454 <MX_GPIO_Init+0xfc>)
 80003de:	f001 f83e 	bl	800145e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2101      	movs	r1, #1
 80003e6:	481c      	ldr	r0, [pc, #112]	; (8000458 <MX_GPIO_Init+0x100>)
 80003e8:	f001 f839 	bl	800145e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f2:	2301      	movs	r3, #1
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4619      	mov	r1, r3
 8000404:	4812      	ldr	r0, [pc, #72]	; (8000450 <MX_GPIO_Init+0xf8>)
 8000406:	f000 fe8f 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800040a:	23c0      	movs	r3, #192	; 0xc0
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040e:	2301      	movs	r3, #1
 8000410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000412:	2300      	movs	r3, #0
 8000414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000416:	2302      	movs	r3, #2
 8000418:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041a:	f107 0310 	add.w	r3, r7, #16
 800041e:	4619      	mov	r1, r3
 8000420:	480c      	ldr	r0, [pc, #48]	; (8000454 <MX_GPIO_Init+0xfc>)
 8000422:	f000 fe81 	bl	8001128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000426:	2301      	movs	r3, #1
 8000428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042a:	2301      	movs	r3, #1
 800042c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000432:	2302      	movs	r3, #2
 8000434:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	4619      	mov	r1, r3
 800043c:	4806      	ldr	r0, [pc, #24]	; (8000458 <MX_GPIO_Init+0x100>)
 800043e:	f000 fe73 	bl	8001128 <HAL_GPIO_Init>

}
 8000442:	bf00      	nop
 8000444:	3720      	adds	r7, #32
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40011000 	.word	0x40011000
 8000454:	40010800 	.word	0x40010800
 8000458:	40010c00 	.word	0x40010c00

0800045c <ImprimirLinea>:

/* USER CODE BEGIN 4 */
void ImprimirLinea(char *s, uint8_t linea) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
	taskENTER_CRITICAL();
 8000468:	f004 fff0 	bl	800544c <vPortEnterCritical>
	/* "borra" la línea para poder escribir en limpio */
	SSD1306_GotoXY(0, 0 + 14 * (linea - 1));
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	3b01      	subs	r3, #1
 8000470:	b29b      	uxth	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	00d2      	lsls	r2, r2, #3
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	005b      	lsls	r3, r3, #1
 800047a:	b29b      	uxth	r3, r3
 800047c:	4619      	mov	r1, r3
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fa92 	bl	80009a8 <SSD1306_GotoXY>
	SSD1306_Puts(" ", &Font_7x10, 1);
 8000484:	2201      	movs	r2, #1
 8000486:	490e      	ldr	r1, [pc, #56]	; (80004c0 <ImprimirLinea+0x64>)
 8000488:	480e      	ldr	r0, [pc, #56]	; (80004c4 <ImprimirLinea+0x68>)
 800048a:	f000 fb23 	bl	8000ad4 <SSD1306_Puts>
	/* imprime la cadena */
	SSD1306_GotoXY(0, 0 + 14 * (linea - 1));
 800048e:	78fb      	ldrb	r3, [r7, #3]
 8000490:	3b01      	subs	r3, #1
 8000492:	b29b      	uxth	r3, r3
 8000494:	461a      	mov	r2, r3
 8000496:	00d2      	lsls	r2, r2, #3
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	005b      	lsls	r3, r3, #1
 800049c:	b29b      	uxth	r3, r3
 800049e:	4619      	mov	r1, r3
 80004a0:	2000      	movs	r0, #0
 80004a2:	f000 fa81 	bl	80009a8 <SSD1306_GotoXY>
	SSD1306_Puts(s, &Font_7x10, 1);
 80004a6:	2201      	movs	r2, #1
 80004a8:	4905      	ldr	r1, [pc, #20]	; (80004c0 <ImprimirLinea+0x64>)
 80004aa:	6878      	ldr	r0, [r7, #4]
 80004ac:	f000 fb12 	bl	8000ad4 <SSD1306_Puts>
	/*actualiza pantalla*/
	SSD1306_UpdateScreen();
 80004b0:	f000 f9d6 	bl	8000860 <SSD1306_UpdateScreen>
	taskEXIT_CRITICAL();
 80004b4:	f004 fffa 	bl	80054ac <vPortExitCritical>
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000000 	.word	0x20000000
 80004c4:	08005b5c 	.word	0x08005b5c

080004c8 <configureTimerForRunTimeStats>:

void configureTimerForRunTimeStats(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim1);
 80004cc:	4803      	ldr	r0, [pc, #12]	; (80004dc <configureTimerForRunTimeStats+0x14>)
 80004ce:	f002 f9c5 	bl	800285c <HAL_TIM_Base_Start_IT>
	ticks_10kHz = 0;
 80004d2:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <configureTimerForRunTimeStats+0x18>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000088 	.word	0x20000088
 80004e0:	200000dc 	.word	0x200000dc

080004e4 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	return ticks_10kHz;
 80004e8:	4b02      	ldr	r3, [pc, #8]	; (80004f4 <getRunTimeCounterValue+0x10>)
 80004ea:	681b      	ldr	r3, [r3, #0]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	200000dc 	.word	0x200000dc

080004f8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a06      	ldr	r2, [pc, #24]	; (800051c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d104      	bne.n	8000512 <HAL_TIM_PeriodElapsedCallback+0x1a>
		ticks_10kHz++;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000510:	6013      	str	r3, [r2, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	20000088 	.word	0x20000088
 8000520:	200000dc 	.word	0x200000dc

08000524 <callback_in>:

void callback_in(int tag) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	switch (tag) {
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d015      	beq.n	800055e <callback_in+0x3a>
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2b03      	cmp	r3, #3
 8000536:	dc18      	bgt.n	800056a <callback_in+0x46>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d003      	beq.n	8000546 <callback_in+0x22>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d006      	beq.n	8000552 <callback_in+0x2e>
		break;
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //cable verde ch2
		break;
	}
}
 8000544:	e011      	b.n	800056a <callback_in+0x46>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //cable azul ch4
 8000546:	2201      	movs	r2, #1
 8000548:	2101      	movs	r1, #1
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <callback_in+0x50>)
 800054c:	f000 ff87 	bl	800145e <HAL_GPIO_WritePin>
		break;
 8000550:	e00b      	b.n	800056a <callback_in+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET); //cable amarillo ch0
 8000552:	2201      	movs	r2, #1
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	4808      	ldr	r0, [pc, #32]	; (8000578 <callback_in+0x54>)
 8000558:	f000 ff81 	bl	800145e <HAL_GPIO_WritePin>
		break;
 800055c:	e005      	b.n	800056a <callback_in+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //cable verde ch2
 800055e:	2201      	movs	r2, #1
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <callback_in+0x54>)
 8000564:	f000 ff7b 	bl	800145e <HAL_GPIO_WritePin>
		break;
 8000568:	bf00      	nop
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010c00 	.word	0x40010c00
 8000578:	40010800 	.word	0x40010800

0800057c <callback_out>:

void callback_out(int tag) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	switch (tag) {
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b03      	cmp	r3, #3
 8000588:	d015      	beq.n	80005b6 <callback_out+0x3a>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b03      	cmp	r3, #3
 800058e:	dc18      	bgt.n	80005c2 <callback_out+0x46>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d003      	beq.n	800059e <callback_out+0x22>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b02      	cmp	r3, #2
 800059a:	d006      	beq.n	80005aa <callback_out+0x2e>
		break;
	case 3:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		break;
	}
}
 800059c:	e011      	b.n	80005c2 <callback_out+0x46>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2101      	movs	r1, #1
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <callback_out+0x50>)
 80005a4:	f000 ff5b 	bl	800145e <HAL_GPIO_WritePin>
		break;
 80005a8:	e00b      	b.n	80005c2 <callback_out+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2180      	movs	r1, #128	; 0x80
 80005ae:	4808      	ldr	r0, [pc, #32]	; (80005d0 <callback_out+0x54>)
 80005b0:	f000 ff55 	bl	800145e <HAL_GPIO_WritePin>
		break;
 80005b4:	e005      	b.n	80005c2 <callback_out+0x46>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2140      	movs	r1, #64	; 0x40
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <callback_out+0x54>)
 80005bc:	f000 ff4f 	bl	800145e <HAL_GPIO_WritePin>
		break;
 80005c0:	bf00      	nop
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	40010800 	.word	0x40010800

080005d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Assign a tag value of 1 to myself. */
  vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
 80005dc:	2101      	movs	r1, #1
 80005de:	2000      	movs	r0, #0
 80005e0:	f003 ff9c 	bl	800451c <vTaskSetApplicationTaskTag>
  /* Infinite loop */
	for (;;) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <StartDefaultTask+0x48>)
 80005ea:	f000 ff50 	bl	800148e <HAL_GPIO_TogglePin>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80005ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f2:	480a      	ldr	r0, [pc, #40]	; (800061c <StartDefaultTask+0x48>)
 80005f4:	f000 ff1c 	bl	8001430 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d004      	beq.n	8000608 <StartDefaultTask+0x34>
			ImprimirLinea("LED = OFF", 1);
 80005fe:	2101      	movs	r1, #1
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <StartDefaultTask+0x4c>)
 8000602:	f7ff ff2b 	bl	800045c <ImprimirLinea>
 8000606:	e003      	b.n	8000610 <StartDefaultTask+0x3c>
		} else {
			ImprimirLinea("LED = ON ", 1);
 8000608:	2101      	movs	r1, #1
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <StartDefaultTask+0x50>)
 800060c:	f7ff ff26 	bl	800045c <ImprimirLinea>
		}
		osDelay(1000);
 8000610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000614:	f002 fddc 	bl	80031d0 <osDelay>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000618:	e7e4      	b.n	80005e4 <StartDefaultTask+0x10>
 800061a:	bf00      	nop
 800061c:	40011000 	.word	0x40011000
 8000620:	08005b60 	.word	0x08005b60
 8000624:	08005b6c 	.word	0x08005b6c

08000628 <entrySensor1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_entrySensor1 */
void entrySensor1(void *argument)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN entrySensor1 */
  /* Assign a tag value of 2 to myself. */
  vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
 8000630:	2102      	movs	r1, #2
 8000632:	2000      	movs	r0, #0
 8000634:	f003 ff72 	bl	800451c <vTaskSetApplicationTaskTag>
  /* Infinite loop */
	int sensor = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
	char val[20] = "sensor1 = ";
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <entrySensor1+0x5c>)
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	ca07      	ldmia	r2, {r0, r1, r2}
 8000644:	c303      	stmia	r3!, {r0, r1}
 8000646:	801a      	strh	r2, [r3, #0]
 8000648:	3302      	adds	r3, #2
 800064a:	0c12      	lsrs	r2, r2, #16
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	f107 0313 	add.w	r3, r7, #19
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	721a      	strb	r2, [r3, #8]
	for (;;) {
		/* convierte el valor del sensor a ascii y lo
		 concatena al final de "sensor2 = " */
		itoa(sensor, val + 10, 10);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	330a      	adds	r3, #10
 8000660:	220a      	movs	r2, #10
 8000662:	4619      	mov	r1, r3
 8000664:	69f8      	ldr	r0, [r7, #28]
 8000666:	f005 fa05 	bl	8005a74 <itoa>
		ImprimirLinea(val, 2);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2102      	movs	r1, #2
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fef3 	bl	800045c <ImprimirLinea>
		sensor++;
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3301      	adds	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
		osDelay(100);
 800067c:	2064      	movs	r0, #100	; 0x64
 800067e:	f002 fda7 	bl	80031d0 <osDelay>
		itoa(sensor, val + 10, 10);
 8000682:	e7ea      	b.n	800065a <entrySensor1+0x32>
 8000684:	08005b78 	.word	0x08005b78

08000688 <NombreApellido>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NombreApellido */
void NombreApellido(void *argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NombreApellido */
  /* Assign a tag value of 3 to myself. */
  vTaskSetApplicationTaskTag( NULL, ( void * ) 3 );
 8000690:	2103      	movs	r1, #3
 8000692:	2000      	movs	r0, #0
 8000694:	f003 ff42 	bl	800451c <vTaskSetApplicationTaskTag>
  /* Infinite loop */
  int m=0;
 8000698:	2300      	movs	r3, #0
 800069a:	60fb      	str	r3, [r7, #12]
	for(;;)
  {
		if (m==0) {
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d106      	bne.n	80006b0 <NombreApellido+0x28>
			ImprimirLinea("MOREYRA", 3);
 80006a2:	2103      	movs	r1, #3
 80006a4:	4807      	ldr	r0, [pc, #28]	; (80006c4 <NombreApellido+0x3c>)
 80006a6:	f7ff fed9 	bl	800045c <ImprimirLinea>
			m=1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	e005      	b.n	80006bc <NombreApellido+0x34>
		} else {
			ImprimirLinea("JUAN   ", 3);
 80006b0:	2103      	movs	r1, #3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <NombreApellido+0x40>)
 80006b4:	f7ff fed2 	bl	800045c <ImprimirLinea>
			m=0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
		}
		osDelay(200);
 80006bc:	20c8      	movs	r0, #200	; 0xc8
 80006be:	f002 fd87 	bl	80031d0 <osDelay>
		if (m==0) {
 80006c2:	e7eb      	b.n	800069c <NombreApellido+0x14>
 80006c4:	08005b8c 	.word	0x08005b8c
 80006c8:	08005b94 	.word	0x08005b94

080006cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d0:	b672      	cpsid	i
}
 80006d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <Error_Handler+0x8>
	...

080006d8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80006de:	f000 fa27 	bl	8000b30 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80006e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80006e6:	2201      	movs	r2, #1
 80006e8:	2178      	movs	r1, #120	; 0x78
 80006ea:	485b      	ldr	r0, [pc, #364]	; (8000858 <SSD1306_Init+0x180>)
 80006ec:	f001 f92a 	bl	8001944 <HAL_I2C_IsDeviceReady>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e0a9      	b.n	800084e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80006fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80006fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000700:	e002      	b.n	8000708 <SSD1306_Init+0x30>
		p--;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3b01      	subs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f9      	bne.n	8000702 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800070e:	22ae      	movs	r2, #174	; 0xae
 8000710:	2100      	movs	r1, #0
 8000712:	2078      	movs	r0, #120	; 0x78
 8000714:	f000 fa86 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000718:	2220      	movs	r2, #32
 800071a:	2100      	movs	r1, #0
 800071c:	2078      	movs	r0, #120	; 0x78
 800071e:	f000 fa81 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000722:	2210      	movs	r2, #16
 8000724:	2100      	movs	r1, #0
 8000726:	2078      	movs	r0, #120	; 0x78
 8000728:	f000 fa7c 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800072c:	22b0      	movs	r2, #176	; 0xb0
 800072e:	2100      	movs	r1, #0
 8000730:	2078      	movs	r0, #120	; 0x78
 8000732:	f000 fa77 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000736:	22c8      	movs	r2, #200	; 0xc8
 8000738:	2100      	movs	r1, #0
 800073a:	2078      	movs	r0, #120	; 0x78
 800073c:	f000 fa72 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000740:	2200      	movs	r2, #0
 8000742:	2100      	movs	r1, #0
 8000744:	2078      	movs	r0, #120	; 0x78
 8000746:	f000 fa6d 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800074a:	2210      	movs	r2, #16
 800074c:	2100      	movs	r1, #0
 800074e:	2078      	movs	r0, #120	; 0x78
 8000750:	f000 fa68 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000754:	2240      	movs	r2, #64	; 0x40
 8000756:	2100      	movs	r1, #0
 8000758:	2078      	movs	r0, #120	; 0x78
 800075a:	f000 fa63 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800075e:	2281      	movs	r2, #129	; 0x81
 8000760:	2100      	movs	r1, #0
 8000762:	2078      	movs	r0, #120	; 0x78
 8000764:	f000 fa5e 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000768:	22ff      	movs	r2, #255	; 0xff
 800076a:	2100      	movs	r1, #0
 800076c:	2078      	movs	r0, #120	; 0x78
 800076e:	f000 fa59 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000772:	22a1      	movs	r2, #161	; 0xa1
 8000774:	2100      	movs	r1, #0
 8000776:	2078      	movs	r0, #120	; 0x78
 8000778:	f000 fa54 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800077c:	22a6      	movs	r2, #166	; 0xa6
 800077e:	2100      	movs	r1, #0
 8000780:	2078      	movs	r0, #120	; 0x78
 8000782:	f000 fa4f 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000786:	22a8      	movs	r2, #168	; 0xa8
 8000788:	2100      	movs	r1, #0
 800078a:	2078      	movs	r0, #120	; 0x78
 800078c:	f000 fa4a 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000790:	223f      	movs	r2, #63	; 0x3f
 8000792:	2100      	movs	r1, #0
 8000794:	2078      	movs	r0, #120	; 0x78
 8000796:	f000 fa45 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800079a:	22a4      	movs	r2, #164	; 0xa4
 800079c:	2100      	movs	r1, #0
 800079e:	2078      	movs	r0, #120	; 0x78
 80007a0:	f000 fa40 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80007a4:	22d3      	movs	r2, #211	; 0xd3
 80007a6:	2100      	movs	r1, #0
 80007a8:	2078      	movs	r0, #120	; 0x78
 80007aa:	f000 fa3b 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2078      	movs	r0, #120	; 0x78
 80007b4:	f000 fa36 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80007b8:	22d5      	movs	r2, #213	; 0xd5
 80007ba:	2100      	movs	r1, #0
 80007bc:	2078      	movs	r0, #120	; 0x78
 80007be:	f000 fa31 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80007c2:	22f0      	movs	r2, #240	; 0xf0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2078      	movs	r0, #120	; 0x78
 80007c8:	f000 fa2c 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80007cc:	22d9      	movs	r2, #217	; 0xd9
 80007ce:	2100      	movs	r1, #0
 80007d0:	2078      	movs	r0, #120	; 0x78
 80007d2:	f000 fa27 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80007d6:	2222      	movs	r2, #34	; 0x22
 80007d8:	2100      	movs	r1, #0
 80007da:	2078      	movs	r0, #120	; 0x78
 80007dc:	f000 fa22 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80007e0:	22da      	movs	r2, #218	; 0xda
 80007e2:	2100      	movs	r1, #0
 80007e4:	2078      	movs	r0, #120	; 0x78
 80007e6:	f000 fa1d 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80007ea:	2212      	movs	r2, #18
 80007ec:	2100      	movs	r1, #0
 80007ee:	2078      	movs	r0, #120	; 0x78
 80007f0:	f000 fa18 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80007f4:	22db      	movs	r2, #219	; 0xdb
 80007f6:	2100      	movs	r1, #0
 80007f8:	2078      	movs	r0, #120	; 0x78
 80007fa:	f000 fa13 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80007fe:	2220      	movs	r2, #32
 8000800:	2100      	movs	r1, #0
 8000802:	2078      	movs	r0, #120	; 0x78
 8000804:	f000 fa0e 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000808:	228d      	movs	r2, #141	; 0x8d
 800080a:	2100      	movs	r1, #0
 800080c:	2078      	movs	r0, #120	; 0x78
 800080e:	f000 fa09 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000812:	2214      	movs	r2, #20
 8000814:	2100      	movs	r1, #0
 8000816:	2078      	movs	r0, #120	; 0x78
 8000818:	f000 fa04 	bl	8000c24 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800081c:	22af      	movs	r2, #175	; 0xaf
 800081e:	2100      	movs	r1, #0
 8000820:	2078      	movs	r0, #120	; 0x78
 8000822:	f000 f9ff 	bl	8000c24 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000826:	222e      	movs	r2, #46	; 0x2e
 8000828:	2100      	movs	r1, #0
 800082a:	2078      	movs	r0, #120	; 0x78
 800082c:	f000 f9fa 	bl	8000c24 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000830:	2000      	movs	r0, #0
 8000832:	f000 f843 	bl	80008bc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000836:	f000 f813 	bl	8000860 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <SSD1306_Init+0x184>)
 800083c:	2200      	movs	r2, #0
 800083e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <SSD1306_Init+0x184>)
 8000842:	2200      	movs	r2, #0
 8000844:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <SSD1306_Init+0x184>)
 8000848:	2201      	movs	r2, #1
 800084a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800084c:	2301      	movs	r3, #1
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000034 	.word	0x20000034
 800085c:	200004e0 	.word	0x200004e0

08000860 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000866:	2300      	movs	r3, #0
 8000868:	71fb      	strb	r3, [r7, #7]
 800086a:	e01d      	b.n	80008a8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	3b50      	subs	r3, #80	; 0x50
 8000870:	b2db      	uxtb	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	2078      	movs	r0, #120	; 0x78
 8000878:	f000 f9d4 	bl	8000c24 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2078      	movs	r0, #120	; 0x78
 8000882:	f000 f9cf 	bl	8000c24 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000886:	2210      	movs	r2, #16
 8000888:	2100      	movs	r1, #0
 800088a:	2078      	movs	r0, #120	; 0x78
 800088c:	f000 f9ca 	bl	8000c24 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	01db      	lsls	r3, r3, #7
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <SSD1306_UpdateScreen+0x58>)
 8000896:	441a      	add	r2, r3
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	2078      	movs	r0, #120	; 0x78
 800089e:	f000 f95b 	bl	8000b58 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	3301      	adds	r3, #1
 80008a6:	71fb      	strb	r3, [r7, #7]
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	d9de      	bls.n	800086c <SSD1306_UpdateScreen+0xc>
	}
}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000e0 	.word	0x200000e0

080008bc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d101      	bne.n	80008d0 <SSD1306_Fill+0x14>
 80008cc:	2300      	movs	r3, #0
 80008ce:	e000      	b.n	80008d2 <SSD1306_Fill+0x16>
 80008d0:	23ff      	movs	r3, #255	; 0xff
 80008d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008d6:	4619      	mov	r1, r3
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <SSD1306_Fill+0x2c>)
 80008da:	f005 f8db 	bl	8005a94 <memset>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200000e0 	.word	0x200000e0

080008ec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
 80008f6:	460b      	mov	r3, r1
 80008f8:	80bb      	strh	r3, [r7, #4]
 80008fa:	4613      	mov	r3, r2
 80008fc:	70fb      	strb	r3, [r7, #3]
	if (
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	2b7f      	cmp	r3, #127	; 0x7f
 8000902:	d848      	bhi.n	8000996 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000904:	88bb      	ldrh	r3, [r7, #4]
 8000906:	2b3f      	cmp	r3, #63	; 0x3f
 8000908:	d845      	bhi.n	8000996 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <SSD1306_DrawPixel+0xb4>)
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	2b00      	cmp	r3, #0
 8000916:	bf0c      	ite	eq
 8000918:	2301      	moveq	r3, #1
 800091a:	2300      	movne	r3, #0
 800091c:	b2db      	uxtb	r3, r3
 800091e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d11a      	bne.n	800095c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000926:	88fa      	ldrh	r2, [r7, #6]
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	08db      	lsrs	r3, r3, #3
 800092c:	b298      	uxth	r0, r3
 800092e:	4603      	mov	r3, r0
 8000930:	01db      	lsls	r3, r3, #7
 8000932:	4413      	add	r3, r2
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <SSD1306_DrawPixel+0xb8>)
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	b25a      	sxtb	r2, r3
 800093a:	88bb      	ldrh	r3, [r7, #4]
 800093c:	f003 0307 	and.w	r3, r3, #7
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	b25b      	sxtb	r3, r3
 8000948:	4313      	orrs	r3, r2
 800094a:	b259      	sxtb	r1, r3
 800094c:	88fa      	ldrh	r2, [r7, #6]
 800094e:	4603      	mov	r3, r0
 8000950:	01db      	lsls	r3, r3, #7
 8000952:	4413      	add	r3, r2
 8000954:	b2c9      	uxtb	r1, r1
 8000956:	4a13      	ldr	r2, [pc, #76]	; (80009a4 <SSD1306_DrawPixel+0xb8>)
 8000958:	54d1      	strb	r1, [r2, r3]
 800095a:	e01d      	b.n	8000998 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800095c:	88fa      	ldrh	r2, [r7, #6]
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	08db      	lsrs	r3, r3, #3
 8000962:	b298      	uxth	r0, r3
 8000964:	4603      	mov	r3, r0
 8000966:	01db      	lsls	r3, r3, #7
 8000968:	4413      	add	r3, r2
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <SSD1306_DrawPixel+0xb8>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	b25a      	sxtb	r2, r3
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	2101      	movs	r1, #1
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	b25b      	sxtb	r3, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	b25b      	sxtb	r3, r3
 8000982:	4013      	ands	r3, r2
 8000984:	b259      	sxtb	r1, r3
 8000986:	88fa      	ldrh	r2, [r7, #6]
 8000988:	4603      	mov	r3, r0
 800098a:	01db      	lsls	r3, r3, #7
 800098c:	4413      	add	r3, r2
 800098e:	b2c9      	uxtb	r1, r1
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <SSD1306_DrawPixel+0xb8>)
 8000992:	54d1      	strb	r1, [r2, r3]
 8000994:	e000      	b.n	8000998 <SSD1306_DrawPixel+0xac>
		return;
 8000996:	bf00      	nop
	}
}
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	200004e0 	.word	0x200004e0
 80009a4:	200000e0 	.word	0x200000e0

080009a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	460a      	mov	r2, r1
 80009b2:	80fb      	strh	r3, [r7, #6]
 80009b4:	4613      	mov	r3, r2
 80009b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <SSD1306_GotoXY+0x28>)
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <SSD1306_GotoXY+0x28>)
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	8053      	strh	r3, [r2, #2]
}
 80009c4:	bf00      	nop
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bc80      	pop	{r7}
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	200004e0 	.word	0x200004e0

080009d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80009e4:	4b3a      	ldr	r3, [pc, #232]	; (8000ad0 <SSD1306_Putc+0xfc>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4413      	add	r3, r2
	if (
 80009f0:	2b7f      	cmp	r3, #127	; 0x7f
 80009f2:	dc07      	bgt.n	8000a04 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80009f4:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <SSD1306_Putc+0xfc>)
 80009f6:	885b      	ldrh	r3, [r3, #2]
 80009f8:	461a      	mov	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a00:	2b3f      	cmp	r3, #63	; 0x3f
 8000a02:	dd01      	ble.n	8000a08 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e05e      	b.n	8000ac6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	e04b      	b.n	8000aa6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685a      	ldr	r2, [r3, #4]
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	3b20      	subs	r3, #32
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	7849      	ldrb	r1, [r1, #1]
 8000a1a:	fb01 f303 	mul.w	r3, r1, r3
 8000a1e:	4619      	mov	r1, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	440b      	add	r3, r1
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	e030      	b.n	8000a94 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d010      	beq.n	8000a64 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a42:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <SSD1306_Putc+0xfc>)
 8000a44:	881a      	ldrh	r2, [r3, #0]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b298      	uxth	r0, r3
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <SSD1306_Putc+0xfc>)
 8000a50:	885a      	ldrh	r2, [r3, #2]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4413      	add	r3, r2
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	79ba      	ldrb	r2, [r7, #6]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f7ff ff45 	bl	80008ec <SSD1306_DrawPixel>
 8000a62:	e014      	b.n	8000a8e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <SSD1306_Putc+0xfc>)
 8000a66:	881a      	ldrh	r2, [r3, #0]
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	4413      	add	r3, r2
 8000a6e:	b298      	uxth	r0, r3
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <SSD1306_Putc+0xfc>)
 8000a72:	885a      	ldrh	r2, [r3, #2]
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4413      	add	r3, r2
 8000a7a:	b299      	uxth	r1, r3
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bf0c      	ite	eq
 8000a82:	2301      	moveq	r3, #1
 8000a84:	2300      	movne	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	f7ff ff2f 	bl	80008ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	3301      	adds	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d3c8      	bcc.n	8000a32 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	785b      	ldrb	r3, [r3, #1]
 8000aaa:	461a      	mov	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d3ad      	bcc.n	8000a0e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <SSD1306_Putc+0xfc>)
 8000ab4:	881a      	ldrh	r2, [r3, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	b29a      	uxth	r2, r3
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <SSD1306_Putc+0xfc>)
 8000ac2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200004e0 	.word	0x200004e0

08000ad4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000ae2:	e012      	b.n	8000b0a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	79fa      	ldrb	r2, [r7, #7]
 8000aea:	68b9      	ldr	r1, [r7, #8]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff71 	bl	80009d4 <SSD1306_Putc>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d002      	beq.n	8000b04 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	e008      	b.n	8000b16 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e8      	bne.n	8000ae4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	781b      	ldrb	r3, [r3, #0]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff feca 	bl	80008bc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000b28:	f7ff fe9a 	bl	8000860 <SSD1306_UpdateScreen>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b36:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <ssd1306_I2C_Init+0x24>)
 8000b38:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b3a:	e002      	b.n	8000b42 <ssd1306_I2C_Init+0x12>
		p--;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d1f9      	bne.n	8000b3c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	0003d090 	.word	0x0003d090

08000b58 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b0c7      	sub	sp, #284	; 0x11c
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000b66:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000b6a:	600a      	str	r2, [r1, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b72:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000b76:	4622      	mov	r2, r4
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b7e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000b82:	4602      	mov	r2, r0
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b8e:	460a      	mov	r2, r1
 8000b90:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000b96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000b9a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000b9e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000ba2:	7812      	ldrb	r2, [r2, #0]
 8000ba4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bac:	e015      	b.n	8000bda <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000bae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bb2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000bb6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	441a      	add	r2, r3
 8000bbe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	7811      	ldrb	r1, [r2, #0]
 8000bc6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000bca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000bce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000bd0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bda:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000be4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000be8:	8812      	ldrh	r2, [r2, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d8df      	bhi.n	8000bae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bf2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b299      	uxth	r1, r3
 8000bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000bfe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	f107 020c 	add.w	r2, r7, #12
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	9000      	str	r0, [sp, #0]
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <ssd1306_I2C_WriteMulti+0xc8>)
 8000c12:	f000 fd99 	bl	8001748 <HAL_I2C_Master_Transmit>
}
 8000c16:	bf00      	nop
 8000c18:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	20000034 	.word	0x20000034

08000c24 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af02      	add	r7, sp, #8
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	71bb      	strb	r3, [r7, #6]
 8000c32:	4613      	mov	r3, r2
 8000c34:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	b299      	uxth	r1, r3
 8000c42:	f107 020c 	add.w	r2, r7, #12
 8000c46:	230a      	movs	r3, #10
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <ssd1306_I2C_Write+0x38>)
 8000c4e:	f000 fd7b 	bl	8001748 <HAL_I2C_Master_Transmit>
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000034 	.word	0x20000034

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_MspInit+0x68>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a17      	ldr	r2, [pc, #92]	; (8000cc8 <HAL_MspInit+0x68>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_MspInit+0x68>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_MspInit+0x68>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_MspInit+0x68>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x68>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210f      	movs	r1, #15
 8000c9a:	f06f 0001 	mvn.w	r0, #1
 8000c9e:	f000 fa0c 	bl	80010ba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_MspInit+0x6c>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_MspInit+0x6c>)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <HAL_I2C_MspInit+0x70>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d123      	bne.n	8000d38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_I2C_MspInit+0x74>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <HAL_I2C_MspInit+0x74>)
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_I2C_MspInit+0x74>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0308 	and.w	r3, r3, #8
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d08:	23c0      	movs	r3, #192	; 0xc0
 8000d0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0310 	add.w	r3, r7, #16
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <HAL_I2C_MspInit+0x78>)
 8000d1c:	f000 fa04 	bl	8001128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_I2C_MspInit+0x74>)
 8000d22:	69db      	ldr	r3, [r3, #28]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_I2C_MspInit+0x74>)
 8000d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d2a:	61d3      	str	r3, [r2, #28]
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <HAL_I2C_MspInit+0x74>)
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40005400 	.word	0x40005400
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_TIM_Base_MspInit+0x44>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d113      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_TIM_Base_MspInit+0x48>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <HAL_TIM_Base_MspInit+0x48>)
 8000d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_TIM_Base_MspInit+0x48>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2105      	movs	r1, #5
 8000d7a:	2019      	movs	r0, #25
 8000d7c:	f000 f99d 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d80:	2019      	movs	r0, #25
 8000d82:	f000 f9b6 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40012c00 	.word	0x40012c00
 8000d94:	40021000 	.word	0x40021000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr

08000dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc6:	f000 f885 	bl	8000ed4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dca:	f003 fe59 	bl	8004a80 <xTaskGetSchedulerState>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d001      	beq.n	8000dd8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dd4:	f004 fbb8 	bl	8005548 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM1_UP_IRQHandler+0x10>)
 8000de2:	f001 fd8d 	bl	8002900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000088 	.word	0x20000088

08000df0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr

08000dfc <Reset_Handler>:
 8000dfc:	480c      	ldr	r0, [pc, #48]	; (8000e30 <LoopFillZerobss+0x12>)
 8000dfe:	490d      	ldr	r1, [pc, #52]	; (8000e34 <LoopFillZerobss+0x16>)
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LoopFillZerobss+0x1a>)
 8000e02:	2300      	movs	r3, #0
 8000e04:	e002      	b.n	8000e0c <LoopCopyDataInit>

08000e06 <CopyDataInit>:
 8000e06:	58d4      	ldr	r4, [r2, r3]
 8000e08:	50c4      	str	r4, [r0, r3]
 8000e0a:	3304      	adds	r3, #4

08000e0c <LoopCopyDataInit>:
 8000e0c:	18c4      	adds	r4, r0, r3
 8000e0e:	428c      	cmp	r4, r1
 8000e10:	d3f9      	bcc.n	8000e06 <CopyDataInit>
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <LoopFillZerobss+0x1e>)
 8000e14:	4c0a      	ldr	r4, [pc, #40]	; (8000e40 <LoopFillZerobss+0x22>)
 8000e16:	2300      	movs	r3, #0
 8000e18:	e001      	b.n	8000e1e <LoopFillZerobss>

08000e1a <FillZerobss>:
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	3204      	adds	r2, #4

08000e1e <LoopFillZerobss>:
 8000e1e:	42a2      	cmp	r2, r4
 8000e20:	d3fb      	bcc.n	8000e1a <FillZerobss>
 8000e22:	f7ff ffe5 	bl	8000df0 <SystemInit>
 8000e26:	f004 fde9 	bl	80059fc <__libc_init_array>
 8000e2a:	f7ff f991 	bl	8000150 <main>
 8000e2e:	4770      	bx	lr
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000018 	.word	0x20000018
 8000e38:	080063e4 	.word	0x080063e4
 8000e3c:	20000018 	.word	0x20000018
 8000e40:	200021ec 	.word	0x200021ec

08000e44 <ADC1_2_IRQHandler>:
 8000e44:	e7fe      	b.n	8000e44 <ADC1_2_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x28>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x28>)
 8000e52:	f043 0310 	orr.w	r3, r3, #16
 8000e56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f923 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fefc 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40022000 	.word	0x40022000

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f93b 	bl	800110e <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f903 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000010 	.word	0x20000010
 8000ed0:	2000000c 	.word	0x2000000c

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000010 	.word	0x20000010
 8000ef4:	200004e8 	.word	0x200004e8

08000ef8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	200004e8 	.word	0x200004e8

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4906      	ldr	r1, [pc, #24]	; (8000fa4 <__NVIC_EnableIRQ+0x34>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bc80      	pop	{r7}
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff90 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff2d 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff42 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff35 	bl	8000f70 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ffa2 	bl	8001060 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001128:	b480      	push	{r7}
 800112a:	b08b      	sub	sp, #44	; 0x2c
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e169      	b.n	8001410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800113c:	2201      	movs	r2, #1
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8158 	bne.w	800140a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4a9a      	ldr	r2, [pc, #616]	; (80013c8 <HAL_GPIO_Init+0x2a0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d05e      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001164:	4a98      	ldr	r2, [pc, #608]	; (80013c8 <HAL_GPIO_Init+0x2a0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d875      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800116a:	4a98      	ldr	r2, [pc, #608]	; (80013cc <HAL_GPIO_Init+0x2a4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d058      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001170:	4a96      	ldr	r2, [pc, #600]	; (80013cc <HAL_GPIO_Init+0x2a4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d86f      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 8001176:	4a96      	ldr	r2, [pc, #600]	; (80013d0 <HAL_GPIO_Init+0x2a8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d052      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 800117c:	4a94      	ldr	r2, [pc, #592]	; (80013d0 <HAL_GPIO_Init+0x2a8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d869      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 8001182:	4a94      	ldr	r2, [pc, #592]	; (80013d4 <HAL_GPIO_Init+0x2ac>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d04c      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001188:	4a92      	ldr	r2, [pc, #584]	; (80013d4 <HAL_GPIO_Init+0x2ac>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d863      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800118e:	4a92      	ldr	r2, [pc, #584]	; (80013d8 <HAL_GPIO_Init+0x2b0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d046      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
 8001194:	4a90      	ldr	r2, [pc, #576]	; (80013d8 <HAL_GPIO_Init+0x2b0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d85d      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 800119a:	2b12      	cmp	r3, #18
 800119c:	d82a      	bhi.n	80011f4 <HAL_GPIO_Init+0xcc>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d859      	bhi.n	8001256 <HAL_GPIO_Init+0x12e>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <HAL_GPIO_Init+0x80>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	08001223 	.word	0x08001223
 80011ac:	080011fd 	.word	0x080011fd
 80011b0:	0800120f 	.word	0x0800120f
 80011b4:	08001251 	.word	0x08001251
 80011b8:	08001257 	.word	0x08001257
 80011bc:	08001257 	.word	0x08001257
 80011c0:	08001257 	.word	0x08001257
 80011c4:	08001257 	.word	0x08001257
 80011c8:	08001257 	.word	0x08001257
 80011cc:	08001257 	.word	0x08001257
 80011d0:	08001257 	.word	0x08001257
 80011d4:	08001257 	.word	0x08001257
 80011d8:	08001257 	.word	0x08001257
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001257 	.word	0x08001257
 80011e4:	08001257 	.word	0x08001257
 80011e8:	08001257 	.word	0x08001257
 80011ec:	08001205 	.word	0x08001205
 80011f0:	08001219 	.word	0x08001219
 80011f4:	4a79      	ldr	r2, [pc, #484]	; (80013dc <HAL_GPIO_Init+0x2b4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fa:	e02c      	b.n	8001256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	623b      	str	r3, [r7, #32]
          break;
 8001202:	e029      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	3304      	adds	r3, #4
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e024      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	3308      	adds	r3, #8
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e01f      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	330c      	adds	r3, #12
 800121e:	623b      	str	r3, [r7, #32]
          break;
 8001220:	e01a      	b.n	8001258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800122a:	2304      	movs	r3, #4
 800122c:	623b      	str	r3, [r7, #32]
          break;
 800122e:	e013      	b.n	8001258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d105      	bne.n	8001244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001238:	2308      	movs	r3, #8
 800123a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	611a      	str	r2, [r3, #16]
          break;
 8001242:	e009      	b.n	8001258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	615a      	str	r2, [r3, #20]
          break;
 800124e:	e003      	b.n	8001258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
          break;
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x130>
          break;
 8001256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2bff      	cmp	r3, #255	; 0xff
 800125c:	d801      	bhi.n	8001262 <HAL_GPIO_Init+0x13a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	e001      	b.n	8001266 <HAL_GPIO_Init+0x13e>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3304      	adds	r3, #4
 8001266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2bff      	cmp	r3, #255	; 0xff
 800126c:	d802      	bhi.n	8001274 <HAL_GPIO_Init+0x14c>
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	e002      	b.n	800127a <HAL_GPIO_Init+0x152>
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	3b08      	subs	r3, #8
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	210f      	movs	r1, #15
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	401a      	ands	r2, r3
 800128c:	6a39      	ldr	r1, [r7, #32]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	431a      	orrs	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80b1 	beq.w	800140a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a8:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <HAL_GPIO_Init+0x2b8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a4c      	ldr	r2, [pc, #304]	; (80013e0 <HAL_GPIO_Init+0x2b8>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_GPIO_Init+0x2b8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c0:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_GPIO_Init+0x2bc>)
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	089b      	lsrs	r3, r3, #2
 80012c6:	3302      	adds	r3, #2
 80012c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a40      	ldr	r2, [pc, #256]	; (80013e8 <HAL_GPIO_Init+0x2c0>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d013      	beq.n	8001314 <HAL_GPIO_Init+0x1ec>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a3f      	ldr	r2, [pc, #252]	; (80013ec <HAL_GPIO_Init+0x2c4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d00d      	beq.n	8001310 <HAL_GPIO_Init+0x1e8>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3e      	ldr	r2, [pc, #248]	; (80013f0 <HAL_GPIO_Init+0x2c8>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d007      	beq.n	800130c <HAL_GPIO_Init+0x1e4>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3d      	ldr	r2, [pc, #244]	; (80013f4 <HAL_GPIO_Init+0x2cc>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d101      	bne.n	8001308 <HAL_GPIO_Init+0x1e0>
 8001304:	2303      	movs	r3, #3
 8001306:	e006      	b.n	8001316 <HAL_GPIO_Init+0x1ee>
 8001308:	2304      	movs	r3, #4
 800130a:	e004      	b.n	8001316 <HAL_GPIO_Init+0x1ee>
 800130c:	2302      	movs	r3, #2
 800130e:	e002      	b.n	8001316 <HAL_GPIO_Init+0x1ee>
 8001310:	2301      	movs	r3, #1
 8001312:	e000      	b.n	8001316 <HAL_GPIO_Init+0x1ee>
 8001314:	2300      	movs	r3, #0
 8001316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001318:	f002 0203 	and.w	r2, r2, #3
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	4093      	lsls	r3, r2
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4313      	orrs	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001326:	492f      	ldr	r1, [pc, #188]	; (80013e4 <HAL_GPIO_Init+0x2bc>)
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001340:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	492c      	ldr	r1, [pc, #176]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	600b      	str	r3, [r1, #0]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4928      	ldr	r1, [pc, #160]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	4922      	ldr	r1, [pc, #136]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	43db      	mvns	r3, r3
 800137e:	491e      	ldr	r1, [pc, #120]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 8001380:	4013      	ands	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001390:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	4918      	ldr	r1, [pc, #96]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	608b      	str	r3, [r1, #8]
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4914      	ldr	r1, [pc, #80]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d021      	beq.n	80013fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	490e      	ldr	r1, [pc, #56]	; (80013f8 <HAL_GPIO_Init+0x2d0>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
 80013c4:	e021      	b.n	800140a <HAL_GPIO_Init+0x2e2>
 80013c6:	bf00      	nop
 80013c8:	10320000 	.word	0x10320000
 80013cc:	10310000 	.word	0x10310000
 80013d0:	10220000 	.word	0x10220000
 80013d4:	10210000 	.word	0x10210000
 80013d8:	10120000 	.word	0x10120000
 80013dc:	10110000 	.word	0x10110000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40011400 	.word	0x40011400
 80013f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_GPIO_Init+0x304>)
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	43db      	mvns	r3, r3
 8001404:	4909      	ldr	r1, [pc, #36]	; (800142c <HAL_GPIO_Init+0x304>)
 8001406:	4013      	ands	r3, r2
 8001408:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	3301      	adds	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	fa22 f303 	lsr.w	r3, r2, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	f47f ae8e 	bne.w	800113c <HAL_GPIO_Init+0x14>
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	372c      	adds	r7, #44	; 0x2c
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e001      	b.n	8001452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
 800146a:	4613      	mov	r3, r2
 800146c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146e:	787b      	ldrb	r3, [r7, #1]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001474:	887a      	ldrh	r2, [r7, #2]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800147a:	e003      	b.n	8001484 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	041a      	lsls	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	611a      	str	r2, [r3, #16]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	041a      	lsls	r2, r3, #16
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	400b      	ands	r3, r1
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	611a      	str	r2, [r3, #16]
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e12b      	b.n	800172a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff fbf2 	bl	8000cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2224      	movs	r2, #36	; 0x24
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001512:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001522:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001524:	f001 f918 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8001528:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	4a81      	ldr	r2, [pc, #516]	; (8001734 <HAL_I2C_Init+0x274>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d807      	bhi.n	8001544 <HAL_I2C_Init+0x84>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4a80      	ldr	r2, [pc, #512]	; (8001738 <HAL_I2C_Init+0x278>)
 8001538:	4293      	cmp	r3, r2
 800153a:	bf94      	ite	ls
 800153c:	2301      	movls	r3, #1
 800153e:	2300      	movhi	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	e006      	b.n	8001552 <HAL_I2C_Init+0x92>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a7d      	ldr	r2, [pc, #500]	; (800173c <HAL_I2C_Init+0x27c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	bf94      	ite	ls
 800154c:	2301      	movls	r3, #1
 800154e:	2300      	movhi	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0e7      	b.n	800172a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4a78      	ldr	r2, [pc, #480]	; (8001740 <HAL_I2C_Init+0x280>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	0c9b      	lsrs	r3, r3, #18
 8001564:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a6a      	ldr	r2, [pc, #424]	; (8001734 <HAL_I2C_Init+0x274>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d802      	bhi.n	8001594 <HAL_I2C_Init+0xd4>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	e009      	b.n	80015a8 <HAL_I2C_Init+0xe8>
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	4a69      	ldr	r2, [pc, #420]	; (8001744 <HAL_I2C_Init+0x284>)
 80015a0:	fba2 2303 	umull	r2, r3, r2, r3
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	3301      	adds	r3, #1
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	495c      	ldr	r1, [pc, #368]	; (8001734 <HAL_I2C_Init+0x274>)
 80015c4:	428b      	cmp	r3, r1
 80015c6:	d819      	bhi.n	80015fc <HAL_I2C_Init+0x13c>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e59      	subs	r1, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d6:	1c59      	adds	r1, r3, #1
 80015d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015dc:	400b      	ands	r3, r1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <HAL_I2C_Init+0x138>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1e59      	subs	r1, r3, #1
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f0:	3301      	adds	r3, #1
 80015f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f6:	e051      	b.n	800169c <HAL_I2C_Init+0x1dc>
 80015f8:	2304      	movs	r3, #4
 80015fa:	e04f      	b.n	800169c <HAL_I2C_Init+0x1dc>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d111      	bne.n	8001628 <HAL_I2C_Init+0x168>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1e58      	subs	r0, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	440b      	add	r3, r1
 8001612:	fbb0 f3f3 	udiv	r3, r0, r3
 8001616:	3301      	adds	r3, #1
 8001618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800161c:	2b00      	cmp	r3, #0
 800161e:	bf0c      	ite	eq
 8001620:	2301      	moveq	r3, #1
 8001622:	2300      	movne	r3, #0
 8001624:	b2db      	uxtb	r3, r3
 8001626:	e012      	b.n	800164e <HAL_I2C_Init+0x18e>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1e58      	subs	r0, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	0099      	lsls	r1, r3, #2
 8001638:	440b      	add	r3, r1
 800163a:	fbb0 f3f3 	udiv	r3, r0, r3
 800163e:	3301      	adds	r3, #1
 8001640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001644:	2b00      	cmp	r3, #0
 8001646:	bf0c      	ite	eq
 8001648:	2301      	moveq	r3, #1
 800164a:	2300      	movne	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_Init+0x196>
 8001652:	2301      	movs	r3, #1
 8001654:	e022      	b.n	800169c <HAL_I2C_Init+0x1dc>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10e      	bne.n	800167c <HAL_I2C_Init+0x1bc>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1e58      	subs	r0, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6859      	ldr	r1, [r3, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	440b      	add	r3, r1
 800166c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001670:	3301      	adds	r3, #1
 8001672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800167a:	e00f      	b.n	800169c <HAL_I2C_Init+0x1dc>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e58      	subs	r0, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6859      	ldr	r1, [r3, #4]
 8001684:	460b      	mov	r3, r1
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	0099      	lsls	r1, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001692:	3301      	adds	r3, #1
 8001694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	6809      	ldr	r1, [r1, #0]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6911      	ldr	r1, [r2, #16]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68d2      	ldr	r2, [r2, #12]
 80016d6:	4311      	orrs	r1, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	430b      	orrs	r3, r1
 80016de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2220      	movs	r2, #32
 8001716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	000186a0 	.word	0x000186a0
 8001738:	001e847f 	.word	0x001e847f
 800173c:	003d08ff 	.word	0x003d08ff
 8001740:	431bde83 	.word	0x431bde83
 8001744:	10624dd3 	.word	0x10624dd3

08001748 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b088      	sub	sp, #32
 800174c:	af02      	add	r7, sp, #8
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	461a      	mov	r2, r3
 8001754:	460b      	mov	r3, r1
 8001756:	817b      	strh	r3, [r7, #10]
 8001758:	4613      	mov	r3, r2
 800175a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff fbcc 	bl	8000ef8 <HAL_GetTick>
 8001760:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	f040 80e0 	bne.w	8001930 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2319      	movs	r3, #25
 8001776:	2201      	movs	r2, #1
 8001778:	4970      	ldr	r1, [pc, #448]	; (800193c <HAL_I2C_Master_Transmit+0x1f4>)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fa92 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001786:	2302      	movs	r3, #2
 8001788:	e0d3      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_I2C_Master_Transmit+0x50>
 8001794:	2302      	movs	r3, #2
 8001796:	e0cc      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1ea>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d007      	beq.n	80017be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2221      	movs	r2, #33	; 0x21
 80017d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2210      	movs	r2, #16
 80017da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	893a      	ldrh	r2, [r7, #8]
 80017ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4a50      	ldr	r2, [pc, #320]	; (8001940 <HAL_I2C_Master_Transmit+0x1f8>)
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001800:	8979      	ldrh	r1, [r7, #10]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	6a3a      	ldr	r2, [r7, #32]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f9ca 	bl	8001ba0 <I2C_MasterRequestWrite>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e08d      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800182c:	e066      	b.n	80018fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	6a39      	ldr	r1, [r7, #32]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fb0c 	bl	8001e50 <I2C_WaitOnTXEFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00d      	beq.n	800185a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	2b04      	cmp	r3, #4
 8001844:	d107      	bne.n	8001856 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06b      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29a      	uxth	r2, r3
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001882:	3b01      	subs	r3, #1
 8001884:	b29a      	uxth	r2, r3
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b04      	cmp	r3, #4
 8001896:	d11b      	bne.n	80018d0 <HAL_I2C_Master_Transmit+0x188>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d017      	beq.n	80018d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	781a      	ldrb	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	6a39      	ldr	r1, [r7, #32]
 80018d4:	68f8      	ldr	r0, [r7, #12]
 80018d6:	f000 fafc 	bl	8001ed2 <I2C_WaitOnBTFFlagUntilTimeout>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00d      	beq.n	80018fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d107      	bne.n	80018f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e01a      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	2b00      	cmp	r3, #0
 8001902:	d194      	bne.n	800182e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e000      	b.n	8001932 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001930:	2302      	movs	r3, #2
  }
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	00100002 	.word	0x00100002
 8001940:	ffff0000 	.word	0xffff0000

08001944 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b08a      	sub	sp, #40	; 0x28
 8001948:	af02      	add	r7, sp, #8
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	460b      	mov	r3, r1
 8001952:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001954:	f7ff fad0 	bl	8000ef8 <HAL_GetTick>
 8001958:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800195a:	2301      	movs	r3, #1
 800195c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b20      	cmp	r3, #32
 8001968:	f040 8111 	bne.w	8001b8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2319      	movs	r3, #25
 8001972:	2201      	movs	r2, #1
 8001974:	4988      	ldr	r1, [pc, #544]	; (8001b98 <HAL_I2C_IsDeviceReady+0x254>)
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f994 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001982:	2302      	movs	r3, #2
 8001984:	e104      	b.n	8001b90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_I2C_IsDeviceReady+0x50>
 8001990:	2302      	movs	r3, #2
 8001992:	e0fd      	b.n	8001b90 <HAL_I2C_IsDeviceReady+0x24c>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d007      	beq.n	80019ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f042 0201 	orr.w	r2, r2, #1
 80019b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2224      	movs	r2, #36	; 0x24
 80019ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4a70      	ldr	r2, [pc, #448]	; (8001b9c <HAL_I2C_IsDeviceReady+0x258>)
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f952 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00d      	beq.n	8001a22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a14:	d103      	bne.n	8001a1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0b6      	b.n	8001b90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a22:	897b      	ldrh	r3, [r7, #10]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fa61 	bl	8000ef8 <HAL_GetTick>
 8001a36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	2300      	movne	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a66:	e025      	b.n	8001ab4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a68:	f7ff fa46 	bl	8000ef8 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d302      	bcc.n	8001a7e <HAL_I2C_IsDeviceReady+0x13a>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d103      	bne.n	8001a86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	22a0      	movs	r2, #160	; 0xa0
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	bf0c      	ite	eq
 8001a94:	2301      	moveq	r3, #1
 8001a96:	2300      	movne	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2ba0      	cmp	r3, #160	; 0xa0
 8001abe:	d005      	beq.n	8001acc <HAL_I2C_IsDeviceReady+0x188>
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <HAL_I2C_IsDeviceReady+0x188>
 8001ac6:	7dbb      	ldrb	r3, [r7, #22]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0cd      	beq.n	8001a68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d129      	bne.n	8001b36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	2319      	movs	r3, #25
 8001b0e:	2201      	movs	r2, #1
 8001b10:	4921      	ldr	r1, [pc, #132]	; (8001b98 <HAL_I2C_IsDeviceReady+0x254>)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f8c6 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e036      	b.n	8001b90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e02c      	b.n	8001b90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2319      	movs	r3, #25
 8001b56:	2201      	movs	r2, #1
 8001b58:	490f      	ldr	r1, [pc, #60]	; (8001b98 <HAL_I2C_IsDeviceReady+0x254>)
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f8a2 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e012      	b.n	8001b90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f4ff af32 	bcc.w	80019de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
  }
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3720      	adds	r7, #32
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	00100002 	.word	0x00100002
 8001b9c:	ffff0000 	.word	0xffff0000

08001ba0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d006      	beq.n	8001bca <I2C_MasterRequestWrite+0x2a>
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d003      	beq.n	8001bca <I2C_MasterRequestWrite+0x2a>
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bc8:	d108      	bne.n	8001bdc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	e00b      	b.n	8001bf4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d107      	bne.n	8001bf4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 f84f 	bl	8001ca4 <I2C_WaitOnFlagUntilTimeout>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00d      	beq.n	8001c28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c1a:	d103      	bne.n	8001c24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e035      	b.n	8001c94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c30:	d108      	bne.n	8001c44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c32:	897b      	ldrh	r3, [r7, #10]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	461a      	mov	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	e01b      	b.n	8001c7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	11db      	asrs	r3, r3, #7
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 0306 	and.w	r3, r3, #6
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f063 030f 	orn	r3, r3, #15
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <I2C_MasterRequestWrite+0xfc>)
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f875 	bl	8001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e010      	b.n	8001c94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c72:	897b      	ldrh	r3, [r7, #10]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <I2C_MasterRequestWrite+0x100>)
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f865 	bl	8001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	00010008 	.word	0x00010008
 8001ca0:	00010002 	.word	0x00010002

08001ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cb4:	e025      	b.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d021      	beq.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbe:	f7ff f91b 	bl	8000ef8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d116      	bne.n	8001d02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e023      	b.n	8001d4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	0c1b      	lsrs	r3, r3, #16
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d10d      	bne.n	8001d28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4013      	ands	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf0c      	ite	eq
 8001d1e:	2301      	moveq	r3, #1
 8001d20:	2300      	movne	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	e00c      	b.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4013      	ands	r3, r2
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf0c      	ite	eq
 8001d3a:	2301      	moveq	r3, #1
 8001d3c:	2300      	movne	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d0b6      	beq.n	8001cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d60:	e051      	b.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d70:	d123      	bne.n	8001dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f043 0204 	orr.w	r2, r3, #4
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e046      	b.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d021      	beq.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc2:	f7ff f899 	bl	8000ef8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d302      	bcc.n	8001dd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d116      	bne.n	8001e06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2220      	movs	r2, #32
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f043 0220 	orr.w	r2, r3, #32
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e020      	b.n	8001e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	0c1b      	lsrs	r3, r3, #16
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10c      	bne.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bf14      	ite	ne
 8001e22:	2301      	movne	r3, #1
 8001e24:	2300      	moveq	r3, #0
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	e00b      	b.n	8001e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	43da      	mvns	r2, r3
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4013      	ands	r3, r2
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d18d      	bne.n	8001d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e5c:	e02d      	b.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f878 	bl	8001f54 <I2C_IsAcknowledgeFailed>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e02d      	b.n	8001eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e74:	d021      	beq.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e76:	f7ff f83f 	bl	8000ef8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d302      	bcc.n	8001e8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d116      	bne.n	8001eba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f043 0220 	orr.w	r2, r3, #32
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e007      	b.n	8001eca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d1ca      	bne.n	8001e5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ede:	e02d      	b.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f837 	bl	8001f54 <I2C_IsAcknowledgeFailed>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e02d      	b.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef6:	d021      	beq.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef8:	f7fe fffe 	bl	8000ef8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d302      	bcc.n	8001f0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d116      	bne.n	8001f3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f043 0220 	orr.w	r2, r3, #32
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e007      	b.n	8001f4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d1ca      	bne.n	8001ee0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6a:	d11b      	bne.n	8001fa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f043 0204 	orr.w	r2, r3, #4
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e272      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8087 	beq.w	80020de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fd0:	4b92      	ldr	r3, [pc, #584]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 030c 	and.w	r3, r3, #12
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	d00c      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fdc:	4b8f      	ldr	r3, [pc, #572]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d112      	bne.n	800200e <HAL_RCC_OscConfig+0x5e>
 8001fe8:	4b8c      	ldr	r3, [pc, #560]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d10b      	bne.n	800200e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff6:	4b89      	ldr	r3, [pc, #548]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d06c      	beq.n	80020dc <HAL_RCC_OscConfig+0x12c>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d168      	bne.n	80020dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e24c      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x76>
 8002018:	4b80      	ldr	r3, [pc, #512]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7f      	ldr	r2, [pc, #508]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800201e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	e02e      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x98>
 800202e:	4b7b      	ldr	r3, [pc, #492]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7a      	ldr	r2, [pc, #488]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	4b78      	ldr	r3, [pc, #480]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a77      	ldr	r2, [pc, #476]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	e01d      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0xbc>
 8002052:	4b72      	ldr	r3, [pc, #456]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a71      	ldr	r2, [pc, #452]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b6f      	ldr	r3, [pc, #444]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6e      	ldr	r2, [pc, #440]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xd4>
 800206c:	4b6b      	ldr	r3, [pc, #428]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a6a      	ldr	r2, [pc, #424]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b68      	ldr	r3, [pc, #416]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a67      	ldr	r2, [pc, #412]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe ff34 	bl	8000ef8 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe ff30 	bl	8000ef8 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e200      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xe4>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7fe ff20 	bl	8000ef8 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7fe ff1c 	bl	8000ef8 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e1ec      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x10c>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d063      	beq.n	80021b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ea:	4b4c      	ldr	r3, [pc, #304]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020f6:	4b49      	ldr	r3, [pc, #292]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d11c      	bne.n	800213c <HAL_RCC_OscConfig+0x18c>
 8002102:	4b46      	ldr	r3, [pc, #280]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d116      	bne.n	800213c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210e:	4b43      	ldr	r3, [pc, #268]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d005      	beq.n	8002126 <HAL_RCC_OscConfig+0x176>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d001      	beq.n	8002126 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e1c0      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002126:	4b3d      	ldr	r3, [pc, #244]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4939      	ldr	r1, [pc, #228]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800213a:	e03a      	b.n	80021b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d020      	beq.n	8002186 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002144:	4b36      	ldr	r3, [pc, #216]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7fe fed5 	bl	8000ef8 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002152:	f7fe fed1 	bl	8000ef8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e1a1      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	4b2d      	ldr	r3, [pc, #180]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4927      	ldr	r1, [pc, #156]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]
 8002184:	e015      	b.n	80021b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002186:	4b26      	ldr	r3, [pc, #152]	; (8002220 <HAL_RCC_OscConfig+0x270>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe feb4 	bl	8000ef8 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002194:	f7fe feb0 	bl	8000ef8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e180      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d03a      	beq.n	8002234 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d019      	beq.n	80021fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <HAL_RCC_OscConfig+0x274>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021cc:	f7fe fe94 	bl	8000ef8 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d4:	f7fe fe90 	bl	8000ef8 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e160      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_RCC_OscConfig+0x26c>)
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f000 fac4 	bl	8002780 <RCC_Delay>
 80021f8:	e01c      	b.n	8002234 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_RCC_OscConfig+0x274>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7fe fe7a 	bl	8000ef8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002206:	e00f      	b.n	8002228 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002208:	f7fe fe76 	bl	8000ef8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d908      	bls.n	8002228 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e146      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	42420000 	.word	0x42420000
 8002224:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	4b92      	ldr	r3, [pc, #584]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1e9      	bne.n	8002208 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80a6 	beq.w	800238e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002246:	4b8b      	ldr	r3, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10d      	bne.n	800226e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b88      	ldr	r3, [pc, #544]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a87      	ldr	r2, [pc, #540]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b85      	ldr	r3, [pc, #532]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226a:	2301      	movs	r3, #1
 800226c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b82      	ldr	r3, [pc, #520]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227a:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7e      	ldr	r2, [pc, #504]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7fe fe37 	bl	8000ef8 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe fe33 	bl	8000ef8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e103      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b75      	ldr	r3, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x4c8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <HAL_RCC_OscConfig+0x312>
 80022b4:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a6e      	ldr	r2, [pc, #440]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e02d      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCC_OscConfig+0x334>
 80022ca:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a69      	ldr	r2, [pc, #420]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a66      	ldr	r2, [pc, #408]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6213      	str	r3, [r2, #32]
 80022e2:	e01c      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d10c      	bne.n	8002306 <HAL_RCC_OscConfig+0x356>
 80022ec:	4b61      	ldr	r3, [pc, #388]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4a60      	ldr	r2, [pc, #384]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6213      	str	r3, [r2, #32]
 80022f8:	4b5e      	ldr	r3, [pc, #376]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a5d      	ldr	r2, [pc, #372]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6213      	str	r3, [r2, #32]
 8002304:	e00b      	b.n	800231e <HAL_RCC_OscConfig+0x36e>
 8002306:	4b5b      	ldr	r3, [pc, #364]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a5a      	ldr	r2, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800230c:	f023 0301 	bic.w	r3, r3, #1
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	4b58      	ldr	r3, [pc, #352]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a57      	ldr	r2, [pc, #348]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d015      	beq.n	8002352 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe fde7 	bl	8000ef8 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe fde3 	bl	8000ef8 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0b1      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0ee      	beq.n	800232e <HAL_RCC_OscConfig+0x37e>
 8002350:	e014      	b.n	800237c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7fe fdd1 	bl	8000ef8 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	e00a      	b.n	8002370 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fdcd 	bl	8000ef8 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e09b      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ee      	bne.n	800235a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d105      	bne.n	800238e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a3b      	ldr	r2, [pc, #236]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800238c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 8087 	beq.w	80024a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002398:	4b36      	ldr	r3, [pc, #216]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d061      	beq.n	8002468 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d146      	bne.n	800243a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe fda1 	bl	8000ef8 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe fd9d 	bl	8000ef8 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e06d      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f0      	bne.n	80023ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d108      	bne.n	80023f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f4:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a19      	ldr	r1, [r3, #32]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	430b      	orrs	r3, r1
 8002406:	491b      	ldr	r1, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002412:	f7fe fd71 	bl	8000ef8 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fd6d 	bl	8000ef8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e03d      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x46a>
 8002438:	e035      	b.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <HAL_RCC_OscConfig+0x4cc>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fd5a 	bl	8000ef8 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002448:	f7fe fd56 	bl	8000ef8 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e026      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x498>
 8002466:	e01e      	b.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d107      	bne.n	8002480 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e019      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x500>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	429a      	cmp	r2, r3
 8002492:	d106      	bne.n	80024a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0d0      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c8:	4b6a      	ldr	r3, [pc, #424]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d910      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0207 	bic.w	r2, r3, #7
 80024de:	4965      	ldr	r1, [pc, #404]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a58      	ldr	r2, [pc, #352]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800251a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002532:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d040      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d115      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e073      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e06b      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002592:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f023 0203 	bic.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4936      	ldr	r1, [pc, #216]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fca8 	bl	8000ef8 <HAL_GetTick>
 80025a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e00a      	b.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe fca4 	bl	8000ef8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e053      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f003 020c 	and.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1eb      	bne.n	80025ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b27      	ldr	r3, [pc, #156]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d210      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b24      	ldr	r3, [pc, #144]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4922      	ldr	r1, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	; (800267c <HAL_RCC_ClockConfig+0x1c8>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1cc>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_ClockConfig+0x1d0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fc06 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000
 8002678:	40021000 	.word	0x40021000
 800267c:	0800639c 	.word	0x0800639c
 8002680:	20000008 	.word	0x20000008
 8002684:	2000000c 	.word	0x2000000c

08002688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b490      	push	{r4, r7}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800268e:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_RCC_GetSysClockFreq+0xac>)
 8002690:	1d3c      	adds	r4, r7, #4
 8002692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002698:	f240 2301 	movw	r3, #513	; 0x201
 800269c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026b2:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d002      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x40>
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d003      	beq.n	80026ce <HAL_RCC_GetSysClockFreq+0x46>
 80026c6:	e02b      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_RCC_GetSysClockFreq+0xb4>)
 80026ca:	623b      	str	r3, [r7, #32]
      break;
 80026cc:	e02b      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	0c9b      	lsrs	r3, r3, #18
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	3328      	adds	r3, #40	; 0x28
 80026d8:	443b      	add	r3, r7
 80026da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ea:	4b13      	ldr	r3, [pc, #76]	; (8002738 <HAL_RCC_GetSysClockFreq+0xb0>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	0c5b      	lsrs	r3, r3, #17
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	3328      	adds	r3, #40	; 0x28
 80026f6:	443b      	add	r3, r7
 80026f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002702:	fb03 f202 	mul.w	r2, r3, r2
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	e004      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	623b      	str	r3, [r7, #32]
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002722:	623b      	str	r3, [r7, #32]
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	6a3b      	ldr	r3, [r7, #32]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3728      	adds	r7, #40	; 0x28
 800272c:	46bd      	mov	sp, r7
 800272e:	bc90      	pop	{r4, r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	08005b9c 	.word	0x08005b9c
 8002738:	40021000 	.word	0x40021000
 800273c:	007a1200 	.word	0x007a1200
 8002740:	003d0900 	.word	0x003d0900

08002744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b02      	ldr	r3, [pc, #8]	; (8002754 <HAL_RCC_GetHCLKFreq+0x10>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	20000008 	.word	0x20000008

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800275c:	f7ff fff2 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002760:	4602      	mov	r2, r0
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	4903      	ldr	r1, [pc, #12]	; (800277c <HAL_RCC_GetPCLK1Freq+0x24>)
 800276e:	5ccb      	ldrb	r3, [r1, r3]
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	080063ac 	.word	0x080063ac

08002780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <RCC_Delay+0x34>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <RCC_Delay+0x38>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0a5b      	lsrs	r3, r3, #9
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	fb02 f303 	mul.w	r3, r2, r3
 800279a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800279c:	bf00      	nop
  }
  while (Delay --);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1e5a      	subs	r2, r3, #1
 80027a2:	60fa      	str	r2, [r7, #12]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f9      	bne.n	800279c <RCC_Delay+0x1c>
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	20000008 	.word	0x20000008
 80027b8:	10624dd3 	.word	0x10624dd3

080027bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e041      	b.n	8002852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fab2 	bl	8000d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2202      	movs	r2, #2
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	4619      	mov	r1, r3
 80027fa:	4610      	mov	r0, r2
 80027fc:	f000 fa70 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b01      	cmp	r3, #1
 800286e:	d001      	beq.n	8002874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e03a      	b.n	80028ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a18      	ldr	r2, [pc, #96]	; (80028f4 <HAL_TIM_Base_Start_IT+0x98>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x58>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d009      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x58>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x58>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <HAL_TIM_Base_Start_IT+0xa0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d111      	bne.n	80028d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d010      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d6:	e007      	b.n	80028e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 0201 	orr.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr
 80028f4:	40012c00 	.word	0x40012c00
 80028f8:	40000400 	.word	0x40000400
 80028fc:	40000800 	.word	0x40000800

08002900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d122      	bne.n	800295c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b02      	cmp	r3, #2
 8002922:	d11b      	bne.n	800295c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0202 	mvn.w	r2, #2
 800292c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f9b1 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f9a4 	bl	8002c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f9b3 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b04      	cmp	r3, #4
 8002968:	d122      	bne.n	80029b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	d11b      	bne.n	80029b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f06f 0204 	mvn.w	r2, #4
 8002980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f987 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 800299c:	e005      	b.n	80029aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f97a 	bl	8002c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f989 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d122      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d11b      	bne.n	8002a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f06f 0208 	mvn.w	r2, #8
 80029d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2204      	movs	r2, #4
 80029da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f95d 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 80029f0:	e005      	b.n	80029fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f950 	bl	8002c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f95f 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d122      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b10      	cmp	r3, #16
 8002a1e:	d11b      	bne.n	8002a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0210 	mvn.w	r2, #16
 8002a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f933 	bl	8002caa <HAL_TIM_IC_CaptureCallback>
 8002a44:	e005      	b.n	8002a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f926 	bl	8002c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f935 	bl	8002cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d10e      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0201 	mvn.w	r2, #1
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fd fd3a 	bl	80004f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8e:	2b80      	cmp	r3, #128	; 0x80
 8002a90:	d10e      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d107      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fa77 	bl	8002f9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d10e      	bne.n	8002adc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d107      	bne.n	8002adc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8f9 	bl	8002cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d10e      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d107      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0220 	mvn.w	r2, #32
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa42 	bl	8002f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_TIM_ConfigClockSource+0x18>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e0b3      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x180>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b60:	d03e      	beq.n	8002be0 <HAL_TIM_ConfigClockSource+0xd0>
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b66:	f200 8087 	bhi.w	8002c78 <HAL_TIM_ConfigClockSource+0x168>
 8002b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6e:	f000 8085 	beq.w	8002c7c <HAL_TIM_ConfigClockSource+0x16c>
 8002b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b76:	d87f      	bhi.n	8002c78 <HAL_TIM_ConfigClockSource+0x168>
 8002b78:	2b70      	cmp	r3, #112	; 0x70
 8002b7a:	d01a      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0xa2>
 8002b7c:	2b70      	cmp	r3, #112	; 0x70
 8002b7e:	d87b      	bhi.n	8002c78 <HAL_TIM_ConfigClockSource+0x168>
 8002b80:	2b60      	cmp	r3, #96	; 0x60
 8002b82:	d050      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x116>
 8002b84:	2b60      	cmp	r3, #96	; 0x60
 8002b86:	d877      	bhi.n	8002c78 <HAL_TIM_ConfigClockSource+0x168>
 8002b88:	2b50      	cmp	r3, #80	; 0x50
 8002b8a:	d03c      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0xf6>
 8002b8c:	2b50      	cmp	r3, #80	; 0x50
 8002b8e:	d873      	bhi.n	8002c78 <HAL_TIM_ConfigClockSource+0x168>
 8002b90:	2b40      	cmp	r3, #64	; 0x40
 8002b92:	d058      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0x136>
 8002b94:	2b40      	cmp	r3, #64	; 0x40
 8002b96:	d86f      	bhi.n	8002c78 <HAL_TIM_ConfigClockSource+0x168>
 8002b98:	2b30      	cmp	r3, #48	; 0x30
 8002b9a:	d064      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0x156>
 8002b9c:	2b30      	cmp	r3, #48	; 0x30
 8002b9e:	d86b      	bhi.n	8002c78 <HAL_TIM_ConfigClockSource+0x168>
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d060      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0x156>
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d867      	bhi.n	8002c78 <HAL_TIM_ConfigClockSource+0x168>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d05c      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0x156>
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d05a      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002bb0:	e062      	b.n	8002c78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f000 f966 	bl	8002e92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	609a      	str	r2, [r3, #8]
      break;
 8002bde:	e04e      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	f000 f94f 	bl	8002e92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c02:	609a      	str	r2, [r3, #8]
      break;
 8002c04:	e03b      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	461a      	mov	r2, r3
 8002c14:	f000 f8c6 	bl	8002da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2150      	movs	r1, #80	; 0x50
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f91d 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c24:	e02b      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	6859      	ldr	r1, [r3, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f000 f8e4 	bl	8002e00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2160      	movs	r1, #96	; 0x60
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f90d 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c44:	e01b      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6859      	ldr	r1, [r3, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	461a      	mov	r2, r3
 8002c54:	f000 f8a6 	bl	8002da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f8fd 	bl	8002e5e <TIM_ITRx_SetConfig>
      break;
 8002c64:	e00b      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4610      	mov	r0, r2
 8002c72:	f000 f8f4 	bl	8002e5e <TIM_ITRx_SetConfig>
        break;
 8002c76:	e002      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c78:	bf00      	nop
 8002c7a:	e000      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d00b      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d007      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a26      	ldr	r2, [pc, #152]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_Base_SetConfig+0x30>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <TIM_Base_SetConfig+0xc0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00b      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d007      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a19      	ldr	r2, [pc, #100]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d003      	beq.n	8002d42 <TIM_Base_SetConfig+0x62>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <TIM_Base_SetConfig+0xc0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d108      	bne.n	8002d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a07      	ldr	r2, [pc, #28]	; (8002d98 <TIM_Base_SetConfig+0xb8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40000400 	.word	0x40000400
 8002da0:	40000800 	.word	0x40000800

08002da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	f023 0201 	bic.w	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f023 030a 	bic.w	r3, r3, #10
 8002de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	f023 0210 	bic.w	r2, r3, #16
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	031b      	lsls	r3, r3, #12
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr

08002e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f043 0307 	orr.w	r3, r3, #7
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	609a      	str	r2, [r3, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr

08002e92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b087      	sub	sp, #28
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	021a      	lsls	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e046      	b.n	8002f76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00e      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f34:	d009      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a12      	ldr	r2, [pc, #72]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d10c      	bne.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	40012c00 	.word	0x40012c00
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800

08002f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bc80      	pop	{r7}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fb6:	f3ef 8305 	mrs	r3, IPSR
 8002fba:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10f      	bne.n	8002fe2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc6:	607b      	str	r3, [r7, #4]
  return(result);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <osKernelInitialize+0x32>
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <osKernelInitialize+0x60>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d109      	bne.n	8002fea <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fd6:	f3ef 8311 	mrs	r3, BASEPRI
 8002fda:	603b      	str	r3, [r7, #0]
  return(result);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002fe2:	f06f 0305 	mvn.w	r3, #5
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	e00c      	b.n	8003004 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <osKernelInitialize+0x60>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d105      	bne.n	8002ffe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <osKernelInitialize+0x60>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
 8002ffc:	e002      	b.n	8003004 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003004:	68fb      	ldr	r3, [r7, #12]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	200004ec 	.word	0x200004ec

08003014 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800301a:	f3ef 8305 	mrs	r3, IPSR
 800301e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003020:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10f      	bne.n	8003046 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003026:	f3ef 8310 	mrs	r3, PRIMASK
 800302a:	607b      	str	r3, [r7, #4]
  return(result);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <osKernelStart+0x32>
 8003032:	4b11      	ldr	r3, [pc, #68]	; (8003078 <osKernelStart+0x64>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d109      	bne.n	800304e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800303a:	f3ef 8311 	mrs	r3, BASEPRI
 800303e:	603b      	str	r3, [r7, #0]
  return(result);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <osKernelStart+0x3a>
    stat = osErrorISR;
 8003046:	f06f 0305 	mvn.w	r3, #5
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	e00e      	b.n	800306c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <osKernelStart+0x64>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <osKernelStart+0x64>)
 8003058:	2202      	movs	r2, #2
 800305a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800305c:	f001 f87e 	bl	800415c <vTaskStartScheduler>
      stat = osOK;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e002      	b.n	800306c <osKernelStart+0x58>
    } else {
      stat = osError;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
 800306a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800306c:	68fb      	ldr	r3, [r7, #12]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200004ec 	.word	0x200004ec

0800307c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800307c:	b580      	push	{r7, lr}
 800307e:	b092      	sub	sp, #72	; 0x48
 8003080:	af04      	add	r7, sp, #16
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800308c:	f3ef 8305 	mrs	r3, IPSR
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003094:	2b00      	cmp	r3, #0
 8003096:	f040 8094 	bne.w	80031c2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800309a:	f3ef 8310 	mrs	r3, PRIMASK
 800309e:	623b      	str	r3, [r7, #32]
  return(result);
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 808d 	bne.w	80031c2 <osThreadNew+0x146>
 80030a8:	4b48      	ldr	r3, [pc, #288]	; (80031cc <osThreadNew+0x150>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d106      	bne.n	80030be <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030b0:	f3ef 8311 	mrs	r3, BASEPRI
 80030b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 8082 	bne.w	80031c2 <osThreadNew+0x146>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d07e      	beq.n	80031c2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80030c8:	2318      	movs	r3, #24
 80030ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80030cc:	2300      	movs	r3, #0
 80030ce:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80030d0:	f107 031b 	add.w	r3, r7, #27
 80030d4:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d045      	beq.n	800316e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <osThreadNew+0x74>
        name = attr->name;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <osThreadNew+0x9a>
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	2b38      	cmp	r3, #56	; 0x38
 8003108:	d805      	bhi.n	8003116 <osThreadNew+0x9a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <osThreadNew+0x9e>
        return (NULL);
 8003116:	2300      	movs	r3, #0
 8003118:	e054      	b.n	80031c4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	089b      	lsrs	r3, r3, #2
 8003128:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00e      	beq.n	8003150 <osThreadNew+0xd4>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b63      	cmp	r3, #99	; 0x63
 8003138:	d90a      	bls.n	8003150 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <osThreadNew+0xd4>
        mem = 1;
 800314a:	2301      	movs	r3, #1
 800314c:	62bb      	str	r3, [r7, #40]	; 0x28
 800314e:	e010      	b.n	8003172 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10c      	bne.n	8003172 <osThreadNew+0xf6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <osThreadNew+0xf6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <osThreadNew+0xf6>
          mem = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
 800316c:	e001      	b.n	8003172 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	2b01      	cmp	r3, #1
 8003176:	d110      	bne.n	800319a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003180:	9202      	str	r2, [sp, #8]
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 fe12 	bl	8003db8 <xTaskCreateStatic>
 8003194:	4603      	mov	r3, r0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e013      	b.n	80031c2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	d110      	bne.n	80031c2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f000 fe5c 	bl	8003e70 <xTaskCreate>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d001      	beq.n	80031c2 <osThreadNew+0x146>
          hTask = NULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031c2:	697b      	ldr	r3, [r7, #20]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3738      	adds	r7, #56	; 0x38
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	200004ec 	.word	0x200004ec

080031d0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031d8:	f3ef 8305 	mrs	r3, IPSR
 80031dc:	613b      	str	r3, [r7, #16]
  return(result);
 80031de:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10f      	bne.n	8003204 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <osDelay+0x34>
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <osDelay+0x58>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d109      	bne.n	800320c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031f8:	f3ef 8311 	mrs	r3, BASEPRI
 80031fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <osDelay+0x3c>
    stat = osErrorISR;
 8003204:	f06f 0305 	mvn.w	r3, #5
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e007      	b.n	800321c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 ff6c 	bl	80040f4 <vTaskDelay>
    }
  }

  return (stat);
 800321c:	697b      	ldr	r3, [r7, #20]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200004ec 	.word	0x200004ec

0800322c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a06      	ldr	r2, [pc, #24]	; (8003254 <vApplicationGetIdleTaskMemory+0x28>)
 800323c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	4a05      	ldr	r2, [pc, #20]	; (8003258 <vApplicationGetIdleTaskMemory+0x2c>)
 8003242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2280      	movs	r2, #128	; 0x80
 8003248:	601a      	str	r2, [r3, #0]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	200004f0 	.word	0x200004f0
 8003258:	20000554 	.word	0x20000554

0800325c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a07      	ldr	r2, [pc, #28]	; (8003288 <vApplicationGetTimerTaskMemory+0x2c>)
 800326c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4a06      	ldr	r2, [pc, #24]	; (800328c <vApplicationGetTimerTaskMemory+0x30>)
 8003272:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800327a:	601a      	str	r2, [r3, #0]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000754 	.word	0x20000754
 800328c:	200007b8 	.word	0x200007b8

08003290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f103 0208 	add.w	r2, r3, #8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f103 0208 	add.w	r2, r3, #8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f103 0208 	add.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032e6:	b480      	push	{r7}
 80032e8:	b085      	sub	sp, #20
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	bf00      	nop
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003342:	d103      	bne.n	800334c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	e00c      	b.n	8003366 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3308      	adds	r3, #8
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	e002      	b.n	800335a <vListInsert+0x2e>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	d2f6      	bcs.n	8003354 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6892      	ldr	r2, [r2, #8]
 80033b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6852      	ldr	r2, [r2, #4]
 80033bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d103      	bne.n	80033d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	1e5a      	subs	r2, r3, #1
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
	...

080033f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800341a:	f002 f817 	bl	800544c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003426:	68f9      	ldr	r1, [r7, #12]
 8003428:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	441a      	add	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	3b01      	subs	r3, #1
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	441a      	add	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	22ff      	movs	r2, #255	; 0xff
 800345e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	22ff      	movs	r2, #255	; 0xff
 8003466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d114      	bne.n	800349a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01a      	beq.n	80034ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3310      	adds	r3, #16
 800347c:	4618      	mov	r0, r3
 800347e:	f001 f93d 	bl	80046fc <xTaskRemoveFromEventList>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d012      	beq.n	80034ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <xQueueGenericReset+0xcc>)
 800348a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	f3bf 8f4f 	dsb	sy
 8003494:	f3bf 8f6f 	isb	sy
 8003498:	e009      	b.n	80034ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3310      	adds	r3, #16
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fef6 	bl	8003290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3324      	adds	r3, #36	; 0x24
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fef1 	bl	8003290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80034ae:	f001 fffd 	bl	80054ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80034b2:	2301      	movs	r3, #1
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	e000ed04 	.word	0xe000ed04

080034c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	; 0x38
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d10a      	bne.n	80034ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80034e6:	bf00      	nop
 80034e8:	e7fe      	b.n	80034e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <xQueueGenericCreateStatic+0x52>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <xQueueGenericCreateStatic+0x56>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <xQueueGenericCreateStatic+0x58>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10a      	bne.n	8003532 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	623b      	str	r3, [r7, #32]
}
 800352e:	bf00      	nop
 8003530:	e7fe      	b.n	8003530 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <xQueueGenericCreateStatic+0x7e>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <xQueueGenericCreateStatic+0x82>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <xQueueGenericCreateStatic+0x84>
 8003542:	2300      	movs	r3, #0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10a      	bne.n	800355e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	61fb      	str	r3, [r7, #28]
}
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800355e:	2350      	movs	r3, #80	; 0x50
 8003560:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b50      	cmp	r3, #80	; 0x50
 8003566:	d00a      	beq.n	800357e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	61bb      	str	r3, [r7, #24]
}
 800357a:	bf00      	nop
 800357c:	e7fe      	b.n	800357c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003590:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f805 	bl	80035ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80035a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3730      	adds	r7, #48	; 0x30
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e002      	b.n	80035d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035dc:	2101      	movs	r1, #1
 80035de:	69b8      	ldr	r0, [r7, #24]
 80035e0:	f7ff ff06 	bl	80033f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08e      	sub	sp, #56	; 0x38
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003602:	2300      	movs	r3, #0
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10a      	bne.n	8003626 <xQueueGenericSend+0x32>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003622:	bf00      	nop
 8003624:	e7fe      	b.n	8003624 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <xQueueGenericSend+0x40>
 800362c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <xQueueGenericSend+0x44>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <xQueueGenericSend+0x46>
 8003638:	2300      	movs	r3, #0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10a      	bne.n	8003654 <xQueueGenericSend+0x60>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003650:	bf00      	nop
 8003652:	e7fe      	b.n	8003652 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d103      	bne.n	8003662 <xQueueGenericSend+0x6e>
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <xQueueGenericSend+0x72>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <xQueueGenericSend+0x74>
 8003666:	2300      	movs	r3, #0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <xQueueGenericSend+0x8e>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	623b      	str	r3, [r7, #32]
}
 800367e:	bf00      	nop
 8003680:	e7fe      	b.n	8003680 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003682:	f001 f9fd 	bl	8004a80 <xTaskGetSchedulerState>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d102      	bne.n	8003692 <xQueueGenericSend+0x9e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <xQueueGenericSend+0xa2>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <xQueueGenericSend+0xa4>
 8003696:	2300      	movs	r3, #0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	61fb      	str	r3, [r7, #28]
}
 80036ae:	bf00      	nop
 80036b0:	e7fe      	b.n	80036b0 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036b2:	f001 fecb 	bl	800544c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <xQueueGenericSend+0xd4>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d129      	bne.n	800371c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ce:	f000 fa07 	bl	8003ae0 <prvCopyDataToQueue>
 80036d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 f80b 	bl	80046fc <xTaskRemoveFromEventList>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80036ec:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <xQueueGenericSend+0x1f8>)
 80036ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	e00a      	b.n	8003714 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003704:	4b39      	ldr	r3, [pc, #228]	; (80037ec <xQueueGenericSend+0x1f8>)
 8003706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f3bf 8f4f 	dsb	sy
 8003710:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003714:	f001 feca 	bl	80054ac <vPortExitCritical>
				return pdPASS;
 8003718:	2301      	movs	r3, #1
 800371a:	e063      	b.n	80037e4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d103      	bne.n	800372a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003722:	f001 fec3 	bl	80054ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003726:	2300      	movs	r3, #0
 8003728:	e05c      	b.n	80037e4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003730:	f107 0314 	add.w	r3, r7, #20
 8003734:	4618      	mov	r0, r3
 8003736:	f001 f845 	bl	80047c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800373a:	2301      	movs	r3, #1
 800373c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800373e:	f001 feb5 	bl	80054ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003742:	f000 fd73 	bl	800422c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003746:	f001 fe81 	bl	800544c <vPortEnterCritical>
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003750:	b25b      	sxtb	r3, r3
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d103      	bne.n	8003760 <xQueueGenericSend+0x16c>
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003766:	b25b      	sxtb	r3, r3
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d103      	bne.n	8003776 <xQueueGenericSend+0x182>
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003776:	f001 fe99 	bl	80054ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800377a:	1d3a      	adds	r2, r7, #4
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f001 f834 	bl	80047f0 <xTaskCheckForTimeOut>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d124      	bne.n	80037d8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800378e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003790:	f000 fa9e 	bl	8003cd0 <prvIsQueueFull>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d018      	beq.n	80037cc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	3310      	adds	r3, #16
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 ff5a 	bl	800465c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80037a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037aa:	f000 fa29 	bl	8003c00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80037ae:	f000 fd4b 	bl	8004248 <xTaskResumeAll>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f47f af7c 	bne.w	80036b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <xQueueGenericSend+0x1f8>)
 80037bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	e772      	b.n	80036b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80037cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037ce:	f000 fa17 	bl	8003c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037d2:	f000 fd39 	bl	8004248 <xTaskResumeAll>
 80037d6:	e76c      	b.n	80036b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80037d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037da:	f000 fa11 	bl	8003c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037de:	f000 fd33 	bl	8004248 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80037e2:	2300      	movs	r3, #0
		}
	}
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3738      	adds	r7, #56	; 0x38
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	e000ed04 	.word	0xe000ed04

080037f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08e      	sub	sp, #56	; 0x38
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
 80037fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10a      	bne.n	800381e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <xQueueGenericSendFromISR+0x3c>
 8003824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <xQueueGenericSendFromISR+0x40>
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <xQueueGenericSendFromISR+0x42>
 8003830:	2300      	movs	r3, #0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	623b      	str	r3, [r7, #32]
}
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b02      	cmp	r3, #2
 8003850:	d103      	bne.n	800385a <xQueueGenericSendFromISR+0x6a>
 8003852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <xQueueGenericSendFromISR+0x6e>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <xQueueGenericSendFromISR+0x70>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	61fb      	str	r3, [r7, #28]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800387a:	f001 fea9 	bl	80055d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800387e:	f3ef 8211 	mrs	r2, BASEPRI
 8003882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	61ba      	str	r2, [r7, #24]
 8003894:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003896:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003898:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d302      	bcc.n	80038ac <xQueueGenericSendFromISR+0xbc>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d12c      	bne.n	8003906 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038bc:	f000 f910 	bl	8003ae0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d112      	bne.n	80038f0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	3324      	adds	r3, #36	; 0x24
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 ff10 	bl	80046fc <xTaskRemoveFromEventList>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00e      	beq.n	8003900 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00b      	beq.n	8003900 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e007      	b.n	8003900 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038f4:	3301      	adds	r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	b25a      	sxtb	r2, r3
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003900:	2301      	movs	r3, #1
 8003902:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003904:	e001      	b.n	800390a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003906:	2300      	movs	r3, #0
 8003908:	637b      	str	r3, [r7, #52]	; 0x34
 800390a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003914:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003918:	4618      	mov	r0, r3
 800391a:	3738      	adds	r7, #56	; 0x38
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08c      	sub	sp, #48	; 0x30
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <xQueueReceive+0x30>
	__asm volatile
 800393a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393e:	f383 8811 	msr	BASEPRI, r3
 8003942:	f3bf 8f6f 	isb	sy
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	623b      	str	r3, [r7, #32]
}
 800394c:	bf00      	nop
 800394e:	e7fe      	b.n	800394e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <xQueueReceive+0x3e>
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <xQueueReceive+0x42>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <xQueueReceive+0x44>
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10a      	bne.n	800397e <xQueueReceive+0x5e>
	__asm volatile
 8003968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396c:	f383 8811 	msr	BASEPRI, r3
 8003970:	f3bf 8f6f 	isb	sy
 8003974:	f3bf 8f4f 	dsb	sy
 8003978:	61fb      	str	r3, [r7, #28]
}
 800397a:	bf00      	nop
 800397c:	e7fe      	b.n	800397c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397e:	f001 f87f 	bl	8004a80 <xTaskGetSchedulerState>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d102      	bne.n	800398e <xQueueReceive+0x6e>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <xQueueReceive+0x72>
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <xQueueReceive+0x74>
 8003992:	2300      	movs	r3, #0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueReceive+0x8e>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61bb      	str	r3, [r7, #24]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ae:	f001 fd4d 	bl	800544c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01f      	beq.n	80039fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c2:	f000 f8f7 	bl	8003bb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	1e5a      	subs	r2, r3, #1
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00f      	beq.n	80039f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	3310      	adds	r3, #16
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fe8e 	bl	80046fc <xTaskRemoveFromEventList>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d007      	beq.n	80039f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039e6:	4b3d      	ldr	r3, [pc, #244]	; (8003adc <xQueueReceive+0x1bc>)
 80039e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039f6:	f001 fd59 	bl	80054ac <vPortExitCritical>
				return pdPASS;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e069      	b.n	8003ad2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a04:	f001 fd52 	bl	80054ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e062      	b.n	8003ad2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a12:	f107 0310 	add.w	r3, r7, #16
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fed4 	bl	80047c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a20:	f001 fd44 	bl	80054ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a24:	f000 fc02 	bl	800422c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a28:	f001 fd10 	bl	800544c <vPortEnterCritical>
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d103      	bne.n	8003a42 <xQueueReceive+0x122>
 8003a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d103      	bne.n	8003a58 <xQueueReceive+0x138>
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a58:	f001 fd28 	bl	80054ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a5c:	1d3a      	adds	r2, r7, #4
 8003a5e:	f107 0310 	add.w	r3, r7, #16
 8003a62:	4611      	mov	r1, r2
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fec3 	bl	80047f0 <xTaskCheckForTimeOut>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d123      	bne.n	8003ab8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a72:	f000 f917 	bl	8003ca4 <prvIsQueueEmpty>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d017      	beq.n	8003aac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 fde9 	bl	800465c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a8c:	f000 f8b8 	bl	8003c00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a90:	f000 fbda 	bl	8004248 <xTaskResumeAll>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d189      	bne.n	80039ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <xQueueReceive+0x1bc>)
 8003a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	e780      	b.n	80039ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aae:	f000 f8a7 	bl	8003c00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ab2:	f000 fbc9 	bl	8004248 <xTaskResumeAll>
 8003ab6:	e77a      	b.n	80039ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aba:	f000 f8a1 	bl	8003c00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003abe:	f000 fbc3 	bl	8004248 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ac4:	f000 f8ee 	bl	8003ca4 <prvIsQueueEmpty>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f43f af6f 	beq.w	80039ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ad0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3730      	adds	r7, #48	; 0x30
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	e000ed04 	.word	0xe000ed04

08003ae0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d14d      	bne.n	8003ba2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 ffd6 	bl	8004abc <xTaskPriorityDisinherit>
 8003b10:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	e043      	b.n	8003ba2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d119      	bne.n	8003b54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6898      	ldr	r0, [r3, #8]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	f001 ffa4 	bl	8005a78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	441a      	add	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d32b      	bcc.n	8003ba2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	e026      	b.n	8003ba2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	68d8      	ldr	r0, [r3, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	f001 ff8a 	bl	8005a78 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	68da      	ldr	r2, [r3, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	425b      	negs	r3, r3
 8003b6e:	441a      	add	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68da      	ldr	r2, [r3, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d207      	bcs.n	8003b90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	425b      	negs	r3, r3
 8003b8a:	441a      	add	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d105      	bne.n	8003ba2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d002      	beq.n	8003ba2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003baa:	697b      	ldr	r3, [r7, #20]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	441a      	add	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d303      	bcc.n	8003be8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68d9      	ldr	r1, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6838      	ldr	r0, [r7, #0]
 8003bf4:	f001 ff40 	bl	8005a78 <memcpy>
	}
}
 8003bf8:	bf00      	nop
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c08:	f001 fc20 	bl	800544c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c14:	e011      	b.n	8003c3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d012      	beq.n	8003c44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3324      	adds	r3, #36	; 0x24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fd6a 	bl	80046fc <xTaskRemoveFromEventList>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003c2e:	f000 fe41 	bl	80048b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	dce9      	bgt.n	8003c16 <prvUnlockQueue+0x16>
 8003c42:	e000      	b.n	8003c46 <prvUnlockQueue+0x46>
					break;
 8003c44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003c4e:	f001 fc2d 	bl	80054ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003c52:	f001 fbfb 	bl	800544c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c5e:	e011      	b.n	8003c84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d012      	beq.n	8003c8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3310      	adds	r3, #16
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fd45 	bl	80046fc <xTaskRemoveFromEventList>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003c78:	f000 fe1c 	bl	80048b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003c7c:	7bbb      	ldrb	r3, [r7, #14]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003c84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	dce9      	bgt.n	8003c60 <prvUnlockQueue+0x60>
 8003c8c:	e000      	b.n	8003c90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003c8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	22ff      	movs	r2, #255	; 0xff
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003c98:	f001 fc08 	bl	80054ac <vPortExitCritical>
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cac:	f001 fbce 	bl	800544c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e001      	b.n	8003cc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cc2:	f001 fbf3 	bl	80054ac <vPortExitCritical>

	return xReturn;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cd8:	f001 fbb8 	bl	800544c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d102      	bne.n	8003cee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e001      	b.n	8003cf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003cf2:	f001 fbdb 	bl	80054ac <vPortExitCritical>

	return xReturn;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	e014      	b.n	8003d3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d10:	4a0e      	ldr	r2, [pc, #56]	; (8003d4c <vQueueAddToRegistry+0x4c>)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d1c:	490b      	ldr	r1, [pc, #44]	; (8003d4c <vQueueAddToRegistry+0x4c>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <vQueueAddToRegistry+0x4c>)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003d32:	e006      	b.n	8003d42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b07      	cmp	r3, #7
 8003d3e:	d9e7      	bls.n	8003d10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr
 8003d4c:	20000bb8 	.word	0x20000bb8

08003d50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003d60:	f001 fb74 	bl	800544c <vPortEnterCritical>
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d6a:	b25b      	sxtb	r3, r3
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d103      	bne.n	8003d7a <vQueueWaitForMessageRestricted+0x2a>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d103      	bne.n	8003d90 <vQueueWaitForMessageRestricted+0x40>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d90:	f001 fb8c 	bl	80054ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3324      	adds	r3, #36	; 0x24
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fc7d 	bl	80046a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003daa:	6978      	ldr	r0, [r7, #20]
 8003dac:	f7ff ff28 	bl	8003c00 <prvUnlockQueue>
	}
 8003db0:	bf00      	nop
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08e      	sub	sp, #56	; 0x38
 8003dbc:	af04      	add	r7, sp, #16
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	623b      	str	r3, [r7, #32]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xTaskCreateStatic+0x46>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	61fb      	str	r3, [r7, #28]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dfe:	2364      	movs	r3, #100	; 0x64
 8003e00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b64      	cmp	r3, #100	; 0x64
 8003e06:	d00a      	beq.n	8003e1e <xTaskCreateStatic+0x66>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	61bb      	str	r3, [r7, #24]
}
 8003e1a:	bf00      	nop
 8003e1c:	e7fe      	b.n	8003e1c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01e      	beq.n	8003e62 <xTaskCreateStatic+0xaa>
 8003e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01b      	beq.n	8003e62 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9303      	str	r3, [sp, #12]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	9302      	str	r3, [sp, #8]
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	9301      	str	r3, [sp, #4]
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f850 	bl	8003efa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e5c:	f000 f8da 	bl	8004014 <prvAddNewTaskToReadyList>
 8003e60:	e001      	b.n	8003e66 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e66:	697b      	ldr	r3, [r7, #20]
	}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	; 0x30
 8003e74:	af04      	add	r7, sp, #16
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 fbe1 	bl	800564c <pvPortMalloc>
 8003e8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00e      	beq.n	8003eb0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003e92:	2064      	movs	r0, #100	; 0x64
 8003e94:	f001 fbda 	bl	800564c <pvPortMalloc>
 8003e98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea6:	e005      	b.n	8003eb4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	f001 fc93 	bl	80057d4 <vPortFree>
 8003eae:	e001      	b.n	8003eb4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9303      	str	r3, [sp, #12]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68b9      	ldr	r1, [r7, #8]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f80e 	bl	8003efa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ede:	69f8      	ldr	r0, [r7, #28]
 8003ee0:	f000 f898 	bl	8004014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	e002      	b.n	8003ef0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b088      	sub	sp, #32
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	461a      	mov	r2, r3
 8003f12:	21a5      	movs	r1, #165	; 0xa5
 8003f14:	f001 fdbe 	bl	8005a94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f22:	3b01      	subs	r3, #1
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f023 0307 	bic.w	r3, r3, #7
 8003f30:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	617b      	str	r3, [r7, #20]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f52:	2300      	movs	r3, #0
 8003f54:	61fb      	str	r3, [r7, #28]
 8003f56:	e012      	b.n	8003f7e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	7819      	ldrb	r1, [r3, #0]
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	4413      	add	r3, r2
 8003f66:	3334      	adds	r3, #52	; 0x34
 8003f68:	460a      	mov	r2, r1
 8003f6a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d006      	beq.n	8003f86 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b0f      	cmp	r3, #15
 8003f82:	d9e9      	bls.n	8003f58 <prvInitialiseNewTask+0x5e>
 8003f84:	e000      	b.n	8003f88 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003f86:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b37      	cmp	r3, #55	; 0x37
 8003f94:	d901      	bls.n	8003f9a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f96:	2337      	movs	r3, #55	; 0x37
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	2200      	movs	r2, #0
 8003faa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff f98c 	bl	80032ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	3318      	adds	r3, #24
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f987 	bl	80032ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2200      	movs	r2, #0
 8003fe0:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	69b8      	ldr	r0, [r7, #24]
 8003ff6:	f001 f935 	bl	8005264 <pxPortInitialiseStack>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <prvInitialiseNewTask+0x112>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800400c:	bf00      	nop
 800400e:	3720      	adds	r7, #32
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800401c:	f001 fa16 	bl	800544c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <prvAddNewTaskToReadyList+0xc4>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3301      	adds	r3, #1
 8004026:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <prvAddNewTaskToReadyList+0xc4>)
 8004028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800402a:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <prvAddNewTaskToReadyList+0xc8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004032:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <prvAddNewTaskToReadyList+0xc8>)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <prvAddNewTaskToReadyList+0xc4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d110      	bne.n	8004062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004040:	f000 fc5c 	bl	80048fc <prvInitialiseTaskLists>
 8004044:	e00d      	b.n	8004062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004046:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <prvAddNewTaskToReadyList+0xcc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d109      	bne.n	8004062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800404e:	4b23      	ldr	r3, [pc, #140]	; (80040dc <prvAddNewTaskToReadyList+0xc8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	429a      	cmp	r2, r3
 800405a:	d802      	bhi.n	8004062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800405c:	4a1f      	ldr	r2, [pc, #124]	; (80040dc <prvAddNewTaskToReadyList+0xc8>)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004062:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <prvAddNewTaskToReadyList+0xd0>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3301      	adds	r3, #1
 8004068:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <prvAddNewTaskToReadyList+0xd0>)
 800406a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800406c:	4b1d      	ldr	r3, [pc, #116]	; (80040e4 <prvAddNewTaskToReadyList+0xd0>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004078:	4b1b      	ldr	r3, [pc, #108]	; (80040e8 <prvAddNewTaskToReadyList+0xd4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d903      	bls.n	8004088 <prvAddNewTaskToReadyList+0x74>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <prvAddNewTaskToReadyList+0xd4>)
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4a15      	ldr	r2, [pc, #84]	; (80040ec <prvAddNewTaskToReadyList+0xd8>)
 8004096:	441a      	add	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f7ff f921 	bl	80032e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040a4:	f001 fa02 	bl	80054ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <prvAddNewTaskToReadyList+0xcc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <prvAddNewTaskToReadyList+0xc8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d207      	bcs.n	80040ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040be:	4b0c      	ldr	r3, [pc, #48]	; (80040f0 <prvAddNewTaskToReadyList+0xdc>)
 80040c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200010cc 	.word	0x200010cc
 80040dc:	20000bf8 	.word	0x20000bf8
 80040e0:	200010d8 	.word	0x200010d8
 80040e4:	200010e8 	.word	0x200010e8
 80040e8:	200010d4 	.word	0x200010d4
 80040ec:	20000bfc 	.word	0x20000bfc
 80040f0:	e000ed04 	.word	0xe000ed04

080040f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <vTaskDelay+0x60>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <vTaskDelay+0x30>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	60bb      	str	r3, [r7, #8]
}
 8004120:	bf00      	nop
 8004122:	e7fe      	b.n	8004122 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004124:	f000 f882 	bl	800422c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004128:	2100      	movs	r1, #0
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 fd34 	bl	8004b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004130:	f000 f88a 	bl	8004248 <xTaskResumeAll>
 8004134:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d107      	bne.n	800414c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <vTaskDelay+0x64>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	200010f4 	.word	0x200010f4
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800416a:	463a      	mov	r2, r7
 800416c:	1d39      	adds	r1, r7, #4
 800416e:	f107 0308 	add.w	r3, r7, #8
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff f85a 	bl	800322c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004178:	6839      	ldr	r1, [r7, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68ba      	ldr	r2, [r7, #8]
 800417e:	9202      	str	r2, [sp, #8]
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	2300      	movs	r3, #0
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	2300      	movs	r3, #0
 8004188:	460a      	mov	r2, r1
 800418a:	4922      	ldr	r1, [pc, #136]	; (8004214 <vTaskStartScheduler+0xb8>)
 800418c:	4822      	ldr	r0, [pc, #136]	; (8004218 <vTaskStartScheduler+0xbc>)
 800418e:	f7ff fe13 	bl	8003db8 <xTaskCreateStatic>
 8004192:	4603      	mov	r3, r0
 8004194:	4a21      	ldr	r2, [pc, #132]	; (800421c <vTaskStartScheduler+0xc0>)
 8004196:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <vTaskStartScheduler+0xc0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041a0:	2301      	movs	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	e001      	b.n	80041aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d102      	bne.n	80041b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041b0:	f000 fd46 	bl	8004c40 <xTimerCreateTimerTask>
 80041b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d118      	bne.n	80041ee <vTaskStartScheduler+0x92>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	613b      	str	r3, [r7, #16]
}
 80041ce:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80041d0:	4b13      	ldr	r3, [pc, #76]	; (8004220 <vTaskStartScheduler+0xc4>)
 80041d2:	f04f 32ff 	mov.w	r2, #4294967295
 80041d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <vTaskStartScheduler+0xc8>)
 80041da:	2201      	movs	r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <vTaskStartScheduler+0xcc>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80041e4:	f7fc f970 	bl	80004c8 <configureTimerForRunTimeStats>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80041e8:	f001 f8be 	bl	8005368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80041ec:	e00e      	b.n	800420c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f4:	d10a      	bne.n	800420c <vTaskStartScheduler+0xb0>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60fb      	str	r3, [r7, #12]
}
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <vTaskStartScheduler+0xae>
}
 800420c:	bf00      	nop
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	08005bac 	.word	0x08005bac
 8004218:	080048cd 	.word	0x080048cd
 800421c:	200010f0 	.word	0x200010f0
 8004220:	200010ec 	.word	0x200010ec
 8004224:	200010d8 	.word	0x200010d8
 8004228:	200010d0 	.word	0x200010d0

0800422c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004230:	4b04      	ldr	r3, [pc, #16]	; (8004244 <vTaskSuspendAll+0x18>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a03      	ldr	r2, [pc, #12]	; (8004244 <vTaskSuspendAll+0x18>)
 8004238:	6013      	str	r3, [r2, #0]
}
 800423a:	bf00      	nop
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	200010f4 	.word	0x200010f4

08004248 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004256:	4b42      	ldr	r3, [pc, #264]	; (8004360 <xTaskResumeAll+0x118>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <xTaskResumeAll+0x2c>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	603b      	str	r3, [r7, #0]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004274:	f001 f8ea 	bl	800544c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004278:	4b39      	ldr	r3, [pc, #228]	; (8004360 <xTaskResumeAll+0x118>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	4a38      	ldr	r2, [pc, #224]	; (8004360 <xTaskResumeAll+0x118>)
 8004280:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004282:	4b37      	ldr	r3, [pc, #220]	; (8004360 <xTaskResumeAll+0x118>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d162      	bne.n	8004350 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800428a:	4b36      	ldr	r3, [pc, #216]	; (8004364 <xTaskResumeAll+0x11c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d05e      	beq.n	8004350 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004292:	e02f      	b.n	80042f4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004294:	4b34      	ldr	r3, [pc, #208]	; (8004368 <xTaskResumeAll+0x120>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3318      	adds	r3, #24
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff f87b 	bl	800339c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	3304      	adds	r3, #4
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff f876 	bl	800339c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	4b2d      	ldr	r3, [pc, #180]	; (800436c <xTaskResumeAll+0x124>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d903      	bls.n	80042c4 <xTaskResumeAll+0x7c>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	4a2a      	ldr	r2, [pc, #168]	; (800436c <xTaskResumeAll+0x124>)
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4a27      	ldr	r2, [pc, #156]	; (8004370 <xTaskResumeAll+0x128>)
 80042d2:	441a      	add	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3304      	adds	r3, #4
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7ff f803 	bl	80032e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	4b23      	ldr	r3, [pc, #140]	; (8004374 <xTaskResumeAll+0x12c>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d302      	bcc.n	80042f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <xTaskResumeAll+0x130>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <xTaskResumeAll+0x120>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1cb      	bne.n	8004294 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004302:	f000 fb99 	bl	8004a38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004306:	4b1d      	ldr	r3, [pc, #116]	; (800437c <xTaskResumeAll+0x134>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d010      	beq.n	8004334 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004312:	f000 f845 	bl	80043a0 <xTaskIncrementTick>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800431c:	4b16      	ldr	r3, [pc, #88]	; (8004378 <xTaskResumeAll+0x130>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3b01      	subs	r3, #1
 8004326:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f1      	bne.n	8004312 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <xTaskResumeAll+0x134>)
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004334:	4b10      	ldr	r3, [pc, #64]	; (8004378 <xTaskResumeAll+0x130>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <xTaskResumeAll+0x138>)
 8004342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004350:	f001 f8ac 	bl	80054ac <vPortExitCritical>

	return xAlreadyYielded;
 8004354:	68bb      	ldr	r3, [r7, #8]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	200010f4 	.word	0x200010f4
 8004364:	200010cc 	.word	0x200010cc
 8004368:	2000108c 	.word	0x2000108c
 800436c:	200010d4 	.word	0x200010d4
 8004370:	20000bfc 	.word	0x20000bfc
 8004374:	20000bf8 	.word	0x20000bf8
 8004378:	200010e0 	.word	0x200010e0
 800437c:	200010dc 	.word	0x200010dc
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800438a:	4b04      	ldr	r3, [pc, #16]	; (800439c <xTaskGetTickCount+0x18>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004390:	687b      	ldr	r3, [r7, #4]
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	200010d0 	.word	0x200010d0

080043a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043aa:	4b51      	ldr	r3, [pc, #324]	; (80044f0 <xTaskIncrementTick+0x150>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 808e 	bne.w	80044d0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80043b4:	4b4f      	ldr	r3, [pc, #316]	; (80044f4 <xTaskIncrementTick+0x154>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80043bc:	4a4d      	ldr	r2, [pc, #308]	; (80044f4 <xTaskIncrementTick+0x154>)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d120      	bne.n	800440a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80043c8:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <xTaskIncrementTick+0x158>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	603b      	str	r3, [r7, #0]
}
 80043e4:	bf00      	nop
 80043e6:	e7fe      	b.n	80043e6 <xTaskIncrementTick+0x46>
 80043e8:	4b43      	ldr	r3, [pc, #268]	; (80044f8 <xTaskIncrementTick+0x158>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	4b43      	ldr	r3, [pc, #268]	; (80044fc <xTaskIncrementTick+0x15c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a41      	ldr	r2, [pc, #260]	; (80044f8 <xTaskIncrementTick+0x158>)
 80043f4:	6013      	str	r3, [r2, #0]
 80043f6:	4a41      	ldr	r2, [pc, #260]	; (80044fc <xTaskIncrementTick+0x15c>)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b40      	ldr	r3, [pc, #256]	; (8004500 <xTaskIncrementTick+0x160>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	4a3f      	ldr	r2, [pc, #252]	; (8004500 <xTaskIncrementTick+0x160>)
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	f000 fb17 	bl	8004a38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <xTaskIncrementTick+0x164>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	429a      	cmp	r2, r3
 8004412:	d34e      	bcc.n	80044b2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004414:	4b38      	ldr	r3, [pc, #224]	; (80044f8 <xTaskIncrementTick+0x158>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <xTaskIncrementTick+0x82>
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <xTaskIncrementTick+0x84>
 8004422:	2300      	movs	r3, #0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004428:	4b36      	ldr	r3, [pc, #216]	; (8004504 <xTaskIncrementTick+0x164>)
 800442a:	f04f 32ff 	mov.w	r2, #4294967295
 800442e:	601a      	str	r2, [r3, #0]
					break;
 8004430:	e03f      	b.n	80044b2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <xTaskIncrementTick+0x158>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	429a      	cmp	r2, r3
 8004448:	d203      	bcs.n	8004452 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800444a:	4a2e      	ldr	r2, [pc, #184]	; (8004504 <xTaskIncrementTick+0x164>)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6013      	str	r3, [r2, #0]
						break;
 8004450:	e02f      	b.n	80044b2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3304      	adds	r3, #4
 8004456:	4618      	mov	r0, r3
 8004458:	f7fe ffa0 	bl	800339c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	2b00      	cmp	r3, #0
 8004462:	d004      	beq.n	800446e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	3318      	adds	r3, #24
 8004468:	4618      	mov	r0, r3
 800446a:	f7fe ff97 	bl	800339c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	4b25      	ldr	r3, [pc, #148]	; (8004508 <xTaskIncrementTick+0x168>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d903      	bls.n	8004482 <xTaskIncrementTick+0xe2>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	4a22      	ldr	r2, [pc, #136]	; (8004508 <xTaskIncrementTick+0x168>)
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	4613      	mov	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4a1f      	ldr	r2, [pc, #124]	; (800450c <xTaskIncrementTick+0x16c>)
 8004490:	441a      	add	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	3304      	adds	r3, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f7fe ff24 	bl	80032e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <xTaskIncrementTick+0x170>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3b3      	bcc.n	8004414 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044ac:	2301      	movs	r3, #1
 80044ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044b0:	e7b0      	b.n	8004414 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <xTaskIncrementTick+0x170>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	4914      	ldr	r1, [pc, #80]	; (800450c <xTaskIncrementTick+0x16c>)
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d907      	bls.n	80044da <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80044ca:	2301      	movs	r3, #1
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e004      	b.n	80044da <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80044d0:	4b10      	ldr	r3, [pc, #64]	; (8004514 <xTaskIncrementTick+0x174>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	4a0f      	ldr	r2, [pc, #60]	; (8004514 <xTaskIncrementTick+0x174>)
 80044d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <xTaskIncrementTick+0x178>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80044e2:	2301      	movs	r3, #1
 80044e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80044e6:	697b      	ldr	r3, [r7, #20]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	200010f4 	.word	0x200010f4
 80044f4:	200010d0 	.word	0x200010d0
 80044f8:	20001084 	.word	0x20001084
 80044fc:	20001088 	.word	0x20001088
 8004500:	200010e4 	.word	0x200010e4
 8004504:	200010ec 	.word	0x200010ec
 8004508:	200010d4 	.word	0x200010d4
 800450c:	20000bfc 	.word	0x20000bfc
 8004510:	20000bf8 	.word	0x20000bf8
 8004514:	200010dc 	.word	0x200010dc
 8004518:	200010e0 	.word	0x200010e0

0800451c <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800452c:	4b08      	ldr	r3, [pc, #32]	; (8004550 <vTaskSetApplicationTaskTag+0x34>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	e001      	b.n	8004538 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8004538:	f000 ff88 	bl	800544c <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
		taskEXIT_CRITICAL();
 8004542:	f000 ffb3 	bl	80054ac <vPortExitCritical>
	}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000bf8 	.word	0x20000bf8

08004554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800455a:	4b39      	ldr	r3, [pc, #228]	; (8004640 <vTaskSwitchContext+0xec>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004562:	4b38      	ldr	r3, [pc, #224]	; (8004644 <vTaskSwitchContext+0xf0>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004568:	e066      	b.n	8004638 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800456a:	4b36      	ldr	r3, [pc, #216]	; (8004644 <vTaskSwitchContext+0xf0>)
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8004570:	4b35      	ldr	r3, [pc, #212]	; (8004648 <vTaskSwitchContext+0xf4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	4618      	mov	r0, r3
 8004578:	f7fc f800 	bl	800057c <callback_out>
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800457c:	f7fb ffb2 	bl	80004e4 <getRunTimeCounterValue>
 8004580:	4603      	mov	r3, r0
 8004582:	4a32      	ldr	r2, [pc, #200]	; (800464c <vTaskSwitchContext+0xf8>)
 8004584:	6013      	str	r3, [r2, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004586:	4b31      	ldr	r3, [pc, #196]	; (800464c <vTaskSwitchContext+0xf8>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b31      	ldr	r3, [pc, #196]	; (8004650 <vTaskSwitchContext+0xfc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d909      	bls.n	80045a6 <vTaskSwitchContext+0x52>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <vTaskSwitchContext+0xf4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004598:	4a2c      	ldr	r2, [pc, #176]	; (800464c <vTaskSwitchContext+0xf8>)
 800459a:	6810      	ldr	r0, [r2, #0]
 800459c:	4a2c      	ldr	r2, [pc, #176]	; (8004650 <vTaskSwitchContext+0xfc>)
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	1a82      	subs	r2, r0, r2
 80045a2:	440a      	add	r2, r1
 80045a4:	659a      	str	r2, [r3, #88]	; 0x58
				ulTaskSwitchedInTime = ulTotalRunTime;
 80045a6:	4b29      	ldr	r3, [pc, #164]	; (800464c <vTaskSwitchContext+0xf8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a29      	ldr	r2, [pc, #164]	; (8004650 <vTaskSwitchContext+0xfc>)
 80045ac:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80045ae:	4b29      	ldr	r3, [pc, #164]	; (8004654 <vTaskSwitchContext+0x100>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e010      	b.n	80045d8 <vTaskSwitchContext+0x84>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <vTaskSwitchContext+0x7e>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	607b      	str	r3, [r7, #4]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <vTaskSwitchContext+0x7c>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	491f      	ldr	r1, [pc, #124]	; (8004658 <vTaskSwitchContext+0x104>)
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0e4      	beq.n	80045b6 <vTaskSwitchContext+0x62>
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4a18      	ldr	r2, [pc, #96]	; (8004658 <vTaskSwitchContext+0x104>)
 80045f8:	4413      	add	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3308      	adds	r3, #8
 800460e:	429a      	cmp	r2, r3
 8004610:	d104      	bne.n	800461c <vTaskSwitchContext+0xc8>
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <vTaskSwitchContext+0xf4>)
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <vTaskSwitchContext+0x100>)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <vTaskSwitchContext+0xf4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	4618      	mov	r0, r3
 8004634:	f7fb ff76 	bl	8000524 <callback_in>
}
 8004638:	bf00      	nop
 800463a:	3710      	adds	r7, #16
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	200010f4 	.word	0x200010f4
 8004644:	200010e0 	.word	0x200010e0
 8004648:	20000bf8 	.word	0x20000bf8
 800464c:	200010fc 	.word	0x200010fc
 8004650:	200010f8 	.word	0x200010f8
 8004654:	200010d4 	.word	0x200010d4
 8004658:	20000bfc 	.word	0x20000bfc

0800465c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60fb      	str	r3, [r7, #12]
}
 800467e:	bf00      	nop
 8004680:	e7fe      	b.n	8004680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <vTaskPlaceOnEventList+0x44>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3318      	adds	r3, #24
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe fe4e 	bl	800332c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004690:	2101      	movs	r1, #1
 8004692:	6838      	ldr	r0, [r7, #0]
 8004694:	f000 fa80 	bl	8004b98 <prvAddCurrentTaskToDelayedList>
}
 8004698:	bf00      	nop
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20000bf8 	.word	0x20000bf8

080046a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	617b      	str	r3, [r7, #20]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3318      	adds	r3, #24
 80046d2:	4619      	mov	r1, r3
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7fe fe06 	bl	80032e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	68b8      	ldr	r0, [r7, #8]
 80046ea:	f000 fa55 	bl	8004b98 <prvAddCurrentTaskToDelayedList>
	}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000bf8 	.word	0x20000bf8

080046fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10a      	bne.n	8004728 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004716:	f383 8811 	msr	BASEPRI, r3
 800471a:	f3bf 8f6f 	isb	sy
 800471e:	f3bf 8f4f 	dsb	sy
 8004722:	60fb      	str	r3, [r7, #12]
}
 8004724:	bf00      	nop
 8004726:	e7fe      	b.n	8004726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	3318      	adds	r3, #24
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe fe35 	bl	800339c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004732:	4b1e      	ldr	r3, [pc, #120]	; (80047ac <xTaskRemoveFromEventList+0xb0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11d      	bne.n	8004776 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	3304      	adds	r3, #4
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fe2c 	bl	800339c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <xTaskRemoveFromEventList+0xb4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d903      	bls.n	8004758 <xTaskRemoveFromEventList+0x5c>
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	4a16      	ldr	r2, [pc, #88]	; (80047b0 <xTaskRemoveFromEventList+0xb4>)
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <xTaskRemoveFromEventList+0xb8>)
 8004766:	441a      	add	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	3304      	adds	r3, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4610      	mov	r0, r2
 8004770:	f7fe fdb9 	bl	80032e6 <vListInsertEnd>
 8004774:	e005      	b.n	8004782 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	3318      	adds	r3, #24
 800477a:	4619      	mov	r1, r3
 800477c:	480e      	ldr	r0, [pc, #56]	; (80047b8 <xTaskRemoveFromEventList+0xbc>)
 800477e:	f7fe fdb2 	bl	80032e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <xTaskRemoveFromEventList+0xc0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	429a      	cmp	r2, r3
 800478e:	d905      	bls.n	800479c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004790:	2301      	movs	r3, #1
 8004792:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <xTaskRemoveFromEventList+0xc4>)
 8004796:	2201      	movs	r2, #1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	e001      	b.n	80047a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80047a0:	697b      	ldr	r3, [r7, #20]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	200010f4 	.word	0x200010f4
 80047b0:	200010d4 	.word	0x200010d4
 80047b4:	20000bfc 	.word	0x20000bfc
 80047b8:	2000108c 	.word	0x2000108c
 80047bc:	20000bf8 	.word	0x20000bf8
 80047c0:	200010e0 	.word	0x200010e0

080047c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <vTaskInternalSetTimeOutState+0x24>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <vTaskInternalSetTimeOutState+0x28>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	605a      	str	r2, [r3, #4]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	200010e4 	.word	0x200010e4
 80047ec:	200010d0 	.word	0x200010d0

080047f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	613b      	str	r3, [r7, #16]
}
 8004812:	bf00      	nop
 8004814:	e7fe      	b.n	8004814 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	60fb      	str	r3, [r7, #12]
}
 800482e:	bf00      	nop
 8004830:	e7fe      	b.n	8004830 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004832:	f000 fe0b 	bl	800544c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <xTaskCheckForTimeOut+0xbc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484e:	d102      	bne.n	8004856 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004850:	2300      	movs	r3, #0
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	e023      	b.n	800489e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <xTaskCheckForTimeOut+0xc0>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d007      	beq.n	8004872 <xTaskCheckForTimeOut+0x82>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	429a      	cmp	r2, r3
 800486a:	d302      	bcc.n	8004872 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800486c:	2301      	movs	r3, #1
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	e015      	b.n	800489e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	429a      	cmp	r2, r3
 800487a:	d20b      	bcs.n	8004894 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad2      	subs	r2, r2, r3
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ff9b 	bl	80047c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e004      	b.n	800489e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800489a:	2301      	movs	r3, #1
 800489c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800489e:	f000 fe05 	bl	80054ac <vPortExitCritical>

	return xReturn;
 80048a2:	69fb      	ldr	r3, [r7, #28]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3720      	adds	r7, #32
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200010d0 	.word	0x200010d0
 80048b0:	200010e4 	.word	0x200010e4

080048b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <vTaskMissedYield+0x14>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
}
 80048be:	bf00      	nop
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bc80      	pop	{r7}
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	200010e0 	.word	0x200010e0

080048cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048d4:	f000 f852 	bl	800497c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048d8:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <prvIdleTask+0x28>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d9f9      	bls.n	80048d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <prvIdleTask+0x2c>)
 80048e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048f0:	e7f0      	b.n	80048d4 <prvIdleTask+0x8>
 80048f2:	bf00      	nop
 80048f4:	20000bfc 	.word	0x20000bfc
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
 8004906:	e00c      	b.n	8004922 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4a12      	ldr	r2, [pc, #72]	; (800495c <prvInitialiseTaskLists+0x60>)
 8004914:	4413      	add	r3, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fcba 	bl	8003290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3301      	adds	r3, #1
 8004920:	607b      	str	r3, [r7, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b37      	cmp	r3, #55	; 0x37
 8004926:	d9ef      	bls.n	8004908 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004928:	480d      	ldr	r0, [pc, #52]	; (8004960 <prvInitialiseTaskLists+0x64>)
 800492a:	f7fe fcb1 	bl	8003290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800492e:	480d      	ldr	r0, [pc, #52]	; (8004964 <prvInitialiseTaskLists+0x68>)
 8004930:	f7fe fcae 	bl	8003290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004934:	480c      	ldr	r0, [pc, #48]	; (8004968 <prvInitialiseTaskLists+0x6c>)
 8004936:	f7fe fcab 	bl	8003290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800493a:	480c      	ldr	r0, [pc, #48]	; (800496c <prvInitialiseTaskLists+0x70>)
 800493c:	f7fe fca8 	bl	8003290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004940:	480b      	ldr	r0, [pc, #44]	; (8004970 <prvInitialiseTaskLists+0x74>)
 8004942:	f7fe fca5 	bl	8003290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <prvInitialiseTaskLists+0x78>)
 8004948:	4a05      	ldr	r2, [pc, #20]	; (8004960 <prvInitialiseTaskLists+0x64>)
 800494a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800494c:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <prvInitialiseTaskLists+0x7c>)
 800494e:	4a05      	ldr	r2, [pc, #20]	; (8004964 <prvInitialiseTaskLists+0x68>)
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20000bfc 	.word	0x20000bfc
 8004960:	2000105c 	.word	0x2000105c
 8004964:	20001070 	.word	0x20001070
 8004968:	2000108c 	.word	0x2000108c
 800496c:	200010a0 	.word	0x200010a0
 8004970:	200010b8 	.word	0x200010b8
 8004974:	20001084 	.word	0x20001084
 8004978:	20001088 	.word	0x20001088

0800497c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004982:	e019      	b.n	80049b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004984:	f000 fd62 	bl	800544c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004988:	4b10      	ldr	r3, [pc, #64]	; (80049cc <prvCheckTasksWaitingTermination+0x50>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f7fe fd01 	bl	800339c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <prvCheckTasksWaitingTermination+0x54>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	3b01      	subs	r3, #1
 80049a0:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <prvCheckTasksWaitingTermination+0x54>)
 80049a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <prvCheckTasksWaitingTermination+0x58>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <prvCheckTasksWaitingTermination+0x58>)
 80049ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ae:	f000 fd7d 	bl	80054ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f810 	bl	80049d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <prvCheckTasksWaitingTermination+0x58>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e1      	bne.n	8004984 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	200010a0 	.word	0x200010a0
 80049d0:	200010cc 	.word	0x200010cc
 80049d4:	200010b4 	.word	0x200010b4

080049d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d108      	bne.n	80049fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fef0 	bl	80057d4 <vPortFree>
				vPortFree( pxTCB );
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 feed 	bl	80057d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049fa:	e018      	b.n	8004a2e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d103      	bne.n	8004a0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fee4 	bl	80057d4 <vPortFree>
	}
 8004a0c:	e00f      	b.n	8004a2e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d00a      	beq.n	8004a2e <prvDeleteTCB+0x56>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	60fb      	str	r3, [r7, #12]
}
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <prvDeleteTCB+0x54>
	}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <prvResetNextTaskUnblockTime+0x40>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <prvResetNextTaskUnblockTime+0x14>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <prvResetNextTaskUnblockTime+0x16>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <prvResetNextTaskUnblockTime+0x44>)
 8004a54:	f04f 32ff 	mov.w	r2, #4294967295
 8004a58:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a5a:	e008      	b.n	8004a6e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <prvResetNextTaskUnblockTime+0x40>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4a04      	ldr	r2, [pc, #16]	; (8004a7c <prvResetNextTaskUnblockTime+0x44>)
 8004a6c:	6013      	str	r3, [r2, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	20001084 	.word	0x20001084
 8004a7c:	200010ec 	.word	0x200010ec

08004a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <xTaskGetSchedulerState+0x34>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	607b      	str	r3, [r7, #4]
 8004a92:	e008      	b.n	8004aa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a94:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <xTaskGetSchedulerState+0x38>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	607b      	str	r3, [r7, #4]
 8004aa0:	e001      	b.n	8004aa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004aa6:	687b      	ldr	r3, [r7, #4]
	}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	200010d8 	.word	0x200010d8
 8004ab8:	200010f4 	.word	0x200010f4

08004abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d056      	beq.n	8004b80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ad2:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <xTaskPriorityDisinherit+0xd0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d00a      	beq.n	8004af2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60fb      	str	r3, [r7, #12]
}
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	60bb      	str	r3, [r7, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b14:	1e5a      	subs	r2, r3, #1
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d02c      	beq.n	8004b80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d128      	bne.n	8004b80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3304      	adds	r3, #4
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fc32 	bl	800339c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <xTaskPriorityDisinherit+0xd4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d903      	bls.n	8004b60 <xTaskPriorityDisinherit+0xa4>
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4a0c      	ldr	r2, [pc, #48]	; (8004b90 <xTaskPriorityDisinherit+0xd4>)
 8004b5e:	6013      	str	r3, [r2, #0]
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <xTaskPriorityDisinherit+0xd8>)
 8004b6e:	441a      	add	r2, r3
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	3304      	adds	r3, #4
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f7fe fbb5 	bl	80032e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b80:	697b      	ldr	r3, [r7, #20]
	}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000bf8 	.word	0x20000bf8
 8004b90:	200010d4 	.word	0x200010d4
 8004b94:	20000bfc 	.word	0x20000bfc

08004b98 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ba2:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <prvAddCurrentTaskToDelayedList+0x90>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ba8:	4b20      	ldr	r3, [pc, #128]	; (8004c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe fbf4 	bl	800339c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d10a      	bne.n	8004bd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d007      	beq.n	8004bd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	; (8004c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4819      	ldr	r0, [pc, #100]	; (8004c30 <prvAddCurrentTaskToDelayedList+0x98>)
 8004bcc:	f7fe fb8b 	bl	80032e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004bd0:	e026      	b.n	8004c20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d209      	bcs.n	8004bfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f7fe fb98 	bl	800332c <vListInsert>
}
 8004bfc:	e010      	b.n	8004c20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	; (8004c38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7fe fb8e 	bl	800332c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d202      	bcs.n	8004c20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c1a:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6013      	str	r3, [r2, #0]
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	200010d0 	.word	0x200010d0
 8004c2c:	20000bf8 	.word	0x20000bf8
 8004c30:	200010b8 	.word	0x200010b8
 8004c34:	20001088 	.word	0x20001088
 8004c38:	20001084 	.word	0x20001084
 8004c3c:	200010ec 	.word	0x200010ec

08004c40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08a      	sub	sp, #40	; 0x28
 8004c44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c4a:	f000 facb 	bl	80051e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <xTimerCreateTimerTask+0x80>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d021      	beq.n	8004c9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c5e:	1d3a      	adds	r2, r7, #4
 8004c60:	f107 0108 	add.w	r1, r7, #8
 8004c64:	f107 030c 	add.w	r3, r7, #12
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe faf7 	bl	800325c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	9202      	str	r2, [sp, #8]
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	2302      	movs	r3, #2
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	460a      	mov	r2, r1
 8004c80:	4910      	ldr	r1, [pc, #64]	; (8004cc4 <xTimerCreateTimerTask+0x84>)
 8004c82:	4811      	ldr	r0, [pc, #68]	; (8004cc8 <xTimerCreateTimerTask+0x88>)
 8004c84:	f7ff f898 	bl	8003db8 <xTaskCreateStatic>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <xTimerCreateTimerTask+0x8c>)
 8004c8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004c8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <xTimerCreateTimerTask+0x8c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004c96:	2301      	movs	r3, #1
 8004c98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	613b      	str	r3, [r7, #16]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004cb6:	697b      	ldr	r3, [r7, #20]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	20001130 	.word	0x20001130
 8004cc4:	08005bb4 	.word	0x08005bb4
 8004cc8:	08004ded 	.word	0x08004ded
 8004ccc:	20001134 	.word	0x20001134

08004cd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	; 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	623b      	str	r3, [r7, #32]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <xTimerGenericCommand+0x98>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d02a      	beq.n	8004d5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	dc18      	bgt.n	8004d4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d18:	f7ff feb2 	bl	8004a80 <xTaskGetSchedulerState>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d109      	bne.n	8004d36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d22:	4b11      	ldr	r3, [pc, #68]	; (8004d68 <xTimerGenericCommand+0x98>)
 8004d24:	6818      	ldr	r0, [r3, #0]
 8004d26:	f107 0110 	add.w	r1, r7, #16
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	f7fe fc61 	bl	80035f4 <xQueueGenericSend>
 8004d32:	6278      	str	r0, [r7, #36]	; 0x24
 8004d34:	e012      	b.n	8004d5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d36:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <xTimerGenericCommand+0x98>)
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	f107 0110 	add.w	r1, r7, #16
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2200      	movs	r2, #0
 8004d42:	f7fe fc57 	bl	80035f4 <xQueueGenericSend>
 8004d46:	6278      	str	r0, [r7, #36]	; 0x24
 8004d48:	e008      	b.n	8004d5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d4a:	4b07      	ldr	r3, [pc, #28]	; (8004d68 <xTimerGenericCommand+0x98>)
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	f107 0110 	add.w	r1, r7, #16
 8004d52:	2300      	movs	r3, #0
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	f7fe fd4b 	bl	80037f0 <xQueueGenericSendFromISR>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3728      	adds	r7, #40	; 0x28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20001130 	.word	0x20001130

08004d6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <prvProcessExpiredTimer+0x7c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	3304      	adds	r3, #4
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fe fb09 	bl	800339c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d122      	bne.n	8004dd8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	18d1      	adds	r1, r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	6978      	ldr	r0, [r7, #20]
 8004da0:	f000 f8c8 	bl	8004f34 <prvInsertTimerInActiveList>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004daa:	2300      	movs	r3, #0
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	2100      	movs	r1, #0
 8004db4:	6978      	ldr	r0, [r7, #20]
 8004db6:	f7ff ff8b 	bl	8004cd0 <xTimerGenericCommand>
 8004dba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60fb      	str	r3, [r7, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	6978      	ldr	r0, [r7, #20]
 8004dde:	4798      	blx	r3
}
 8004de0:	bf00      	nop
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20001128 	.word	0x20001128

08004dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004df4:	f107 0308 	add.w	r3, r7, #8
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f857 	bl	8004eac <prvGetNextExpireTime>
 8004dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4619      	mov	r1, r3
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f803 	bl	8004e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e0a:	f000 f8d5 	bl	8004fb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e0e:	e7f1      	b.n	8004df4 <prvTimerTask+0x8>

08004e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e1a:	f7ff fa07 	bl	800422c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e1e:	f107 0308 	add.w	r3, r7, #8
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 f866 	bl	8004ef4 <prvSampleTimeNow>
 8004e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d130      	bne.n	8004e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <prvProcessTimerOrBlockTask+0x3c>
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d806      	bhi.n	8004e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e3e:	f7ff fa03 	bl	8004248 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff ff91 	bl	8004d6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e4a:	e024      	b.n	8004e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <prvProcessTimerOrBlockTask+0x90>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e64:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <prvProcessTimerOrBlockTask+0x94>)
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	f7fe ff6d 	bl	8003d50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e76:	f7ff f9e7 	bl	8004248 <xTaskResumeAll>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <prvProcessTimerOrBlockTask+0x98>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
}
 8004e90:	e001      	b.n	8004e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e92:	f7ff f9d9 	bl	8004248 <xTaskResumeAll>
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	2000112c 	.word	0x2000112c
 8004ea4:	20001130 	.word	0x20001130
 8004ea8:	e000ed04 	.word	0xe000ed04

08004eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <prvGetNextExpireTime+0x44>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	bf0c      	ite	eq
 8004ebe:	2301      	moveq	r3, #1
 8004ec0:	2300      	movne	r3, #0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d105      	bne.n	8004ede <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <prvGetNextExpireTime+0x44>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e001      	b.n	8004ee2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20001128 	.word	0x20001128

08004ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004efc:	f7ff fa42 	bl	8004384 <xTaskGetTickCount>
 8004f00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f02:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <prvSampleTimeNow+0x3c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d205      	bcs.n	8004f18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f0c:	f000 f908 	bl	8005120 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
 8004f16:	e002      	b.n	8004f1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f1e:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <prvSampleTimeNow+0x3c>)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f24:	68fb      	ldr	r3, [r7, #12]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	20001138 	.word	0x20001138

08004f34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d812      	bhi.n	8004f80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	1ad2      	subs	r2, r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d302      	bcc.n	8004f6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e01b      	b.n	8004fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f6e:	4b10      	ldr	r3, [pc, #64]	; (8004fb0 <prvInsertTimerInActiveList+0x7c>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3304      	adds	r3, #4
 8004f76:	4619      	mov	r1, r3
 8004f78:	4610      	mov	r0, r2
 8004f7a:	f7fe f9d7 	bl	800332c <vListInsert>
 8004f7e:	e012      	b.n	8004fa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d206      	bcs.n	8004f96 <prvInsertTimerInActiveList+0x62>
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e007      	b.n	8004fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <prvInsertTimerInActiveList+0x80>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f7fe f9c3 	bl	800332c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004fa6:	697b      	ldr	r3, [r7, #20]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3718      	adds	r7, #24
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	2000112c 	.word	0x2000112c
 8004fb4:	20001128 	.word	0x20001128

08004fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08e      	sub	sp, #56	; 0x38
 8004fbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fbe:	e09d      	b.n	80050fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	da18      	bge.n	8004ff8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004fc6:	1d3b      	adds	r3, r7, #4
 8004fc8:	3304      	adds	r3, #4
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	61fb      	str	r3, [r7, #28]
}
 8004fe4:	bf00      	nop
 8004fe6:	e7fe      	b.n	8004fe6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fee:	6850      	ldr	r0, [r2, #4]
 8004ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ff2:	6892      	ldr	r2, [r2, #8]
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	db7d      	blt.n	80050fa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d004      	beq.n	8005014 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	3304      	adds	r3, #4
 800500e:	4618      	mov	r0, r3
 8005010:	f7fe f9c4 	bl	800339c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005014:	463b      	mov	r3, r7
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff ff6c 	bl	8004ef4 <prvSampleTimeNow>
 800501c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b09      	cmp	r3, #9
 8005022:	d86b      	bhi.n	80050fc <prvProcessReceivedCommands+0x144>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <prvProcessReceivedCommands+0x74>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005055 	.word	0x08005055
 8005030:	08005055 	.word	0x08005055
 8005034:	08005055 	.word	0x08005055
 8005038:	080050fd 	.word	0x080050fd
 800503c:	080050b1 	.word	0x080050b1
 8005040:	080050e9 	.word	0x080050e9
 8005044:	08005055 	.word	0x08005055
 8005048:	08005055 	.word	0x08005055
 800504c:	080050fd 	.word	0x080050fd
 8005050:	080050b1 	.word	0x080050b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	18d1      	adds	r1, r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005062:	f7ff ff67 	bl	8004f34 <prvInsertTimerInActiveList>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d047      	beq.n	80050fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800506c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005072:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d13f      	bne.n	80050fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	441a      	add	r2, r3
 8005084:	2300      	movs	r3, #0
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2300      	movs	r3, #0
 800508a:	2100      	movs	r1, #0
 800508c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800508e:	f7ff fe1f 	bl	8004cd0 <xTimerGenericCommand>
 8005092:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d130      	bne.n	80050fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	61bb      	str	r3, [r7, #24]
}
 80050ac:	bf00      	nop
 80050ae:	e7fe      	b.n	80050ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80050b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	617b      	str	r3, [r7, #20]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	18d1      	adds	r1, r2, r3
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e2:	f7ff ff27 	bl	8004f34 <prvInsertTimerInActiveList>
					break;
 80050e6:	e009      	b.n	80050fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80050f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050f4:	f000 fb6e 	bl	80057d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050f8:	e000      	b.n	80050fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80050fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050fc:	4b07      	ldr	r3, [pc, #28]	; (800511c <prvProcessReceivedCommands+0x164>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	1d39      	adds	r1, r7, #4
 8005102:	2200      	movs	r2, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fc0b 	bl	8003920 <xQueueReceive>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f af57 	bne.w	8004fc0 <prvProcessReceivedCommands+0x8>
	}
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	3730      	adds	r7, #48	; 0x30
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	20001130 	.word	0x20001130

08005120 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005126:	e045      	b.n	80051b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005128:	4b2c      	ldr	r3, [pc, #176]	; (80051dc <prvSwitchTimerLists+0xbc>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005132:	4b2a      	ldr	r3, [pc, #168]	; (80051dc <prvSwitchTimerLists+0xbc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3304      	adds	r3, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe f92b 	bl	800339c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d12e      	bne.n	80051b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4413      	add	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	429a      	cmp	r2, r3
 8005166:	d90e      	bls.n	8005186 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005174:	4b19      	ldr	r3, [pc, #100]	; (80051dc <prvSwitchTimerLists+0xbc>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f7fe f8d4 	bl	800332c <vListInsert>
 8005184:	e016      	b.n	80051b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005186:	2300      	movs	r3, #0
 8005188:	9300      	str	r3, [sp, #0]
 800518a:	2300      	movs	r3, #0
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	2100      	movs	r1, #0
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f7ff fd9d 	bl	8004cd0 <xTimerGenericCommand>
 8005196:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	603b      	str	r3, [r7, #0]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <prvSwitchTimerLists+0xbc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1b4      	bne.n	8005128 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <prvSwitchTimerLists+0xbc>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <prvSwitchTimerLists+0xc0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a04      	ldr	r2, [pc, #16]	; (80051dc <prvSwitchTimerLists+0xbc>)
 80051ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051cc:	4a04      	ldr	r2, [pc, #16]	; (80051e0 <prvSwitchTimerLists+0xc0>)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	6013      	str	r3, [r2, #0]
}
 80051d2:	bf00      	nop
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20001128 	.word	0x20001128
 80051e0:	2000112c 	.word	0x2000112c

080051e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051ea:	f000 f92f 	bl	800544c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <prvCheckForValidListAndQueue+0x60>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d120      	bne.n	8005238 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80051f6:	4814      	ldr	r0, [pc, #80]	; (8005248 <prvCheckForValidListAndQueue+0x64>)
 80051f8:	f7fe f84a 	bl	8003290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051fc:	4813      	ldr	r0, [pc, #76]	; (800524c <prvCheckForValidListAndQueue+0x68>)
 80051fe:	f7fe f847 	bl	8003290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005202:	4b13      	ldr	r3, [pc, #76]	; (8005250 <prvCheckForValidListAndQueue+0x6c>)
 8005204:	4a10      	ldr	r2, [pc, #64]	; (8005248 <prvCheckForValidListAndQueue+0x64>)
 8005206:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005208:	4b12      	ldr	r3, [pc, #72]	; (8005254 <prvCheckForValidListAndQueue+0x70>)
 800520a:	4a10      	ldr	r2, [pc, #64]	; (800524c <prvCheckForValidListAndQueue+0x68>)
 800520c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800520e:	2300      	movs	r3, #0
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4b11      	ldr	r3, [pc, #68]	; (8005258 <prvCheckForValidListAndQueue+0x74>)
 8005214:	4a11      	ldr	r2, [pc, #68]	; (800525c <prvCheckForValidListAndQueue+0x78>)
 8005216:	2110      	movs	r1, #16
 8005218:	200a      	movs	r0, #10
 800521a:	f7fe f951 	bl	80034c0 <xQueueGenericCreateStatic>
 800521e:	4603      	mov	r3, r0
 8005220:	4a08      	ldr	r2, [pc, #32]	; (8005244 <prvCheckForValidListAndQueue+0x60>)
 8005222:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <prvCheckForValidListAndQueue+0x60>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800522c:	4b05      	ldr	r3, [pc, #20]	; (8005244 <prvCheckForValidListAndQueue+0x60>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	490b      	ldr	r1, [pc, #44]	; (8005260 <prvCheckForValidListAndQueue+0x7c>)
 8005232:	4618      	mov	r0, r3
 8005234:	f7fe fd64 	bl	8003d00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005238:	f000 f938 	bl	80054ac <vPortExitCritical>
}
 800523c:	bf00      	nop
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20001130 	.word	0x20001130
 8005248:	20001100 	.word	0x20001100
 800524c:	20001114 	.word	0x20001114
 8005250:	20001128 	.word	0x20001128
 8005254:	2000112c 	.word	0x2000112c
 8005258:	200011dc 	.word	0x200011dc
 800525c:	2000113c 	.word	0x2000113c
 8005260:	08005bbc 	.word	0x08005bbc

08005264 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3b04      	subs	r3, #4
 8005274:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800527c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3b04      	subs	r3, #4
 8005282:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f023 0201 	bic.w	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	3b04      	subs	r3, #4
 8005292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005294:	4a08      	ldr	r2, [pc, #32]	; (80052b8 <pxPortInitialiseStack+0x54>)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3b14      	subs	r3, #20
 800529e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	3b20      	subs	r3, #32
 80052aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80052ac:	68fb      	ldr	r3, [r7, #12]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3714      	adds	r7, #20
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr
 80052b8:	080052bd 	.word	0x080052bd

080052bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <prvTaskExitError+0x54>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ce:	d00a      	beq.n	80052e6 <prvTaskExitError+0x2a>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	60fb      	str	r3, [r7, #12]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <prvTaskExitError+0x28>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60bb      	str	r3, [r7, #8]
}
 80052f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80052fa:	bf00      	nop
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0fc      	beq.n	80052fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000014 	.word	0x20000014
	...

08005320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <pxCurrentTCBConst2>)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800532a:	f380 8809 	msr	PSP, r0
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8811 	msr	BASEPRI, r0
 800533a:	f04e 0e0d 	orr.w	lr, lr, #13
 800533e:	4770      	bx	lr

08005340 <pxCurrentTCBConst2>:
 8005340:	20000bf8 	.word	0x20000bf8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005348:	4806      	ldr	r0, [pc, #24]	; (8005364 <prvPortStartFirstTask+0x1c>)
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f380 8808 	msr	MSP, r0
 8005352:	b662      	cpsie	i
 8005354:	b661      	cpsie	f
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	df00      	svc	0
 8005360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005362:	bf00      	nop
 8005364:	e000ed08 	.word	0xe000ed08

08005368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800536e:	4b32      	ldr	r3, [pc, #200]	; (8005438 <xPortStartScheduler+0xd0>)
 8005370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	22ff      	movs	r2, #255	; 0xff
 800537e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005390:	b2da      	uxtb	r2, r3
 8005392:	4b2a      	ldr	r3, [pc, #168]	; (800543c <xPortStartScheduler+0xd4>)
 8005394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005396:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <xPortStartScheduler+0xd8>)
 8005398:	2207      	movs	r2, #7
 800539a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800539c:	e009      	b.n	80053b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800539e:	4b28      	ldr	r3, [pc, #160]	; (8005440 <xPortStartScheduler+0xd8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	4a26      	ldr	r2, [pc, #152]	; (8005440 <xPortStartScheduler+0xd8>)
 80053a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d0ef      	beq.n	800539e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053be:	4b20      	ldr	r3, [pc, #128]	; (8005440 <xPortStartScheduler+0xd8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f1c3 0307 	rsb	r3, r3, #7
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d00a      	beq.n	80053e0 <xPortStartScheduler+0x78>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	60bb      	str	r3, [r7, #8]
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053e0:	4b17      	ldr	r3, [pc, #92]	; (8005440 <xPortStartScheduler+0xd8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	021b      	lsls	r3, r3, #8
 80053e6:	4a16      	ldr	r2, [pc, #88]	; (8005440 <xPortStartScheduler+0xd8>)
 80053e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053ea:	4b15      	ldr	r3, [pc, #84]	; (8005440 <xPortStartScheduler+0xd8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f2:	4a13      	ldr	r2, [pc, #76]	; (8005440 <xPortStartScheduler+0xd8>)
 80053f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <xPortStartScheduler+0xdc>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a10      	ldr	r2, [pc, #64]	; (8005444 <xPortStartScheduler+0xdc>)
 8005404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005408:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800540a:	4b0e      	ldr	r3, [pc, #56]	; (8005444 <xPortStartScheduler+0xdc>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a0d      	ldr	r2, [pc, #52]	; (8005444 <xPortStartScheduler+0xdc>)
 8005410:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005414:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005416:	f000 f8b9 	bl	800558c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800541a:	4b0b      	ldr	r3, [pc, #44]	; (8005448 <xPortStartScheduler+0xe0>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005420:	f7ff ff92 	bl	8005348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005424:	f7ff f896 	bl	8004554 <vTaskSwitchContext>
	prvTaskExitError();
 8005428:	f7ff ff48 	bl	80052bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	e000e400 	.word	0xe000e400
 800543c:	2000122c 	.word	0x2000122c
 8005440:	20001230 	.word	0x20001230
 8005444:	e000ed20 	.word	0xe000ed20
 8005448:	20000014 	.word	0x20000014

0800544c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	607b      	str	r3, [r7, #4]
}
 8005464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005466:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <vPortEnterCritical+0x58>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	4a0d      	ldr	r2, [pc, #52]	; (80054a4 <vPortEnterCritical+0x58>)
 800546e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005470:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <vPortEnterCritical+0x58>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d10f      	bne.n	8005498 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <vPortEnterCritical+0x5c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00a      	beq.n	8005498 <vPortEnterCritical+0x4c>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	603b      	str	r3, [r7, #0]
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <vPortEnterCritical+0x4a>
	}
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	bc80      	pop	{r7}
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000014 	.word	0x20000014
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80054b2:	4b11      	ldr	r3, [pc, #68]	; (80054f8 <vPortExitCritical+0x4c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <vPortExitCritical+0x24>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	607b      	str	r3, [r7, #4]
}
 80054cc:	bf00      	nop
 80054ce:	e7fe      	b.n	80054ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <vPortExitCritical+0x4c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <vPortExitCritical+0x4c>)
 80054d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <vPortExitCritical+0x4c>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d105      	bne.n	80054ee <vPortExitCritical+0x42>
 80054e2:	2300      	movs	r3, #0
 80054e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f383 8811 	msr	BASEPRI, r3
}
 80054ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr
 80054f8:	20000014 	.word	0x20000014
 80054fc:	00000000 	.word	0x00000000

08005500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005500:	f3ef 8009 	mrs	r0, PSP
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <pxCurrentTCBConst>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005510:	6010      	str	r0, [r2, #0]
 8005512:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005516:	f04f 0050 	mov.w	r0, #80	; 0x50
 800551a:	f380 8811 	msr	BASEPRI, r0
 800551e:	f7ff f819 	bl	8004554 <vTaskSwitchContext>
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f380 8811 	msr	BASEPRI, r0
 800552a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	6808      	ldr	r0, [r1, #0]
 8005532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005536:	f380 8809 	msr	PSP, r0
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	4770      	bx	lr

08005540 <pxCurrentTCBConst>:
 8005540:	20000bf8 	.word	0x20000bf8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop

08005548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
}
 8005560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005562:	f7fe ff1d 	bl	80043a0 <xTaskIncrementTick>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <xPortSysTickHandler+0x40>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	2300      	movs	r3, #0
 8005576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f383 8811 	msr	BASEPRI, r3
}
 800557e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <vPortSetupTimerInterrupt+0x30>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <vPortSetupTimerInterrupt+0x34>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <vPortSetupTimerInterrupt+0x38>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <vPortSetupTimerInterrupt+0x3c>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <vPortSetupTimerInterrupt+0x40>)
 80055aa:	3b01      	subs	r3, #1
 80055ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ae:	4b03      	ldr	r3, [pc, #12]	; (80055bc <vPortSetupTimerInterrupt+0x30>)
 80055b0:	2207      	movs	r2, #7
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr
 80055bc:	e000e010 	.word	0xe000e010
 80055c0:	e000e018 	.word	0xe000e018
 80055c4:	20000008 	.word	0x20000008
 80055c8:	10624dd3 	.word	0x10624dd3
 80055cc:	e000e014 	.word	0xe000e014

080055d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055d6:	f3ef 8305 	mrs	r3, IPSR
 80055da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b0f      	cmp	r3, #15
 80055e0:	d914      	bls.n	800560c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055e2:	4a16      	ldr	r2, [pc, #88]	; (800563c <vPortValidateInterruptPriority+0x6c>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055ec:	4b14      	ldr	r3, [pc, #80]	; (8005640 <vPortValidateInterruptPriority+0x70>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	7afa      	ldrb	r2, [r7, #11]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d20a      	bcs.n	800560c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	607b      	str	r3, [r7, #4]
}
 8005608:	bf00      	nop
 800560a:	e7fe      	b.n	800560a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800560c:	4b0d      	ldr	r3, [pc, #52]	; (8005644 <vPortValidateInterruptPriority+0x74>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005614:	4b0c      	ldr	r3, [pc, #48]	; (8005648 <vPortValidateInterruptPriority+0x78>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	429a      	cmp	r2, r3
 800561a:	d90a      	bls.n	8005632 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	603b      	str	r3, [r7, #0]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <vPortValidateInterruptPriority+0x60>
	}
 8005632:	bf00      	nop
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr
 800563c:	e000e3f0 	.word	0xe000e3f0
 8005640:	2000122c 	.word	0x2000122c
 8005644:	e000ed0c 	.word	0xe000ed0c
 8005648:	20001230 	.word	0x20001230

0800564c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005654:	2300      	movs	r3, #0
 8005656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005658:	f7fe fde8 	bl	800422c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800565c:	4b58      	ldr	r3, [pc, #352]	; (80057c0 <pvPortMalloc+0x174>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005664:	f000 f910 	bl	8005888 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005668:	4b56      	ldr	r3, [pc, #344]	; (80057c4 <pvPortMalloc+0x178>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4013      	ands	r3, r2
 8005670:	2b00      	cmp	r3, #0
 8005672:	f040 808e 	bne.w	8005792 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01d      	beq.n	80056b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800567c:	2208      	movs	r2, #8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4413      	add	r3, r2
 8005682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b00      	cmp	r3, #0
 800568c:	d014      	beq.n	80056b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f023 0307 	bic.w	r3, r3, #7
 8005694:	3308      	adds	r3, #8
 8005696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <pvPortMalloc+0x6c>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	617b      	str	r3, [r7, #20]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d069      	beq.n	8005792 <pvPortMalloc+0x146>
 80056be:	4b42      	ldr	r3, [pc, #264]	; (80057c8 <pvPortMalloc+0x17c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d864      	bhi.n	8005792 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056c8:	4b40      	ldr	r3, [pc, #256]	; (80057cc <pvPortMalloc+0x180>)
 80056ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056cc:	4b3f      	ldr	r3, [pc, #252]	; (80057cc <pvPortMalloc+0x180>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056d2:	e004      	b.n	80056de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d903      	bls.n	80056f0 <pvPortMalloc+0xa4>
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f1      	bne.n	80056d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056f0:	4b33      	ldr	r3, [pc, #204]	; (80057c0 <pvPortMalloc+0x174>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d04b      	beq.n	8005792 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2208      	movs	r2, #8
 8005700:	4413      	add	r3, r2
 8005702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	2308      	movs	r3, #8
 8005716:	005b      	lsls	r3, r3, #1
 8005718:	429a      	cmp	r2, r3
 800571a:	d91f      	bls.n	800575c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800571c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4413      	add	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <pvPortMalloc+0xf8>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	613b      	str	r3, [r7, #16]
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005756:	69b8      	ldr	r0, [r7, #24]
 8005758:	f000 f8f8 	bl	800594c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800575c:	4b1a      	ldr	r3, [pc, #104]	; (80057c8 <pvPortMalloc+0x17c>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <pvPortMalloc+0x17c>)
 8005768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800576a:	4b17      	ldr	r3, [pc, #92]	; (80057c8 <pvPortMalloc+0x17c>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <pvPortMalloc+0x184>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d203      	bcs.n	800577e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <pvPortMalloc+0x17c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <pvPortMalloc+0x184>)
 800577c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	4b10      	ldr	r3, [pc, #64]	; (80057c4 <pvPortMalloc+0x178>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	431a      	orrs	r2, r3
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005792:	f7fe fd59 	bl	8004248 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <pvPortMalloc+0x16a>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	60fb      	str	r3, [r7, #12]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <pvPortMalloc+0x168>
	return pvReturn;
 80057b6:	69fb      	ldr	r3, [r7, #28]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3728      	adds	r7, #40	; 0x28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	200021dc 	.word	0x200021dc
 80057c4:	200021e8 	.word	0x200021e8
 80057c8:	200021e0 	.word	0x200021e0
 80057cc:	200021d4 	.word	0x200021d4
 80057d0:	200021e4 	.word	0x200021e4

080057d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d048      	beq.n	8005878 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057e6:	2308      	movs	r3, #8
 80057e8:	425b      	negs	r3, r3
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4413      	add	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	685a      	ldr	r2, [r3, #4]
 80057f8:	4b21      	ldr	r3, [pc, #132]	; (8005880 <vPortFree+0xac>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <vPortFree+0x44>
	__asm volatile
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	60fb      	str	r3, [r7, #12]
}
 8005814:	bf00      	nop
 8005816:	e7fe      	b.n	8005816 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00a      	beq.n	8005836 <vPortFree+0x62>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60bb      	str	r3, [r7, #8]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	4b11      	ldr	r3, [pc, #68]	; (8005880 <vPortFree+0xac>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4013      	ands	r3, r2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d019      	beq.n	8005878 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d115      	bne.n	8005878 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <vPortFree+0xac>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	43db      	mvns	r3, r3
 8005856:	401a      	ands	r2, r3
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800585c:	f7fe fce6 	bl	800422c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	4b07      	ldr	r3, [pc, #28]	; (8005884 <vPortFree+0xb0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4413      	add	r3, r2
 800586a:	4a06      	ldr	r2, [pc, #24]	; (8005884 <vPortFree+0xb0>)
 800586c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800586e:	6938      	ldr	r0, [r7, #16]
 8005870:	f000 f86c 	bl	800594c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005874:	f7fe fce8 	bl	8004248 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005878:	bf00      	nop
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200021e8 	.word	0x200021e8
 8005884:	200021e0 	.word	0x200021e0

08005888 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800588e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8005892:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005894:	4b27      	ldr	r3, [pc, #156]	; (8005934 <prvHeapInit+0xac>)
 8005896:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00c      	beq.n	80058bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3307      	adds	r3, #7
 80058a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <prvHeapInit+0xac>)
 80058b8:	4413      	add	r3, r2
 80058ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058c0:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <prvHeapInit+0xb0>)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <prvHeapInit+0xb0>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	4413      	add	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058d4:	2208      	movs	r2, #8
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0307 	bic.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a15      	ldr	r2, [pc, #84]	; (800593c <prvHeapInit+0xb4>)
 80058e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <prvHeapInit+0xb4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2200      	movs	r2, #0
 80058f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058f2:	4b12      	ldr	r3, [pc, #72]	; (800593c <prvHeapInit+0xb4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	1ad2      	subs	r2, r2, r3
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005908:	4b0c      	ldr	r3, [pc, #48]	; (800593c <prvHeapInit+0xb4>)
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	4a0a      	ldr	r2, [pc, #40]	; (8005940 <prvHeapInit+0xb8>)
 8005916:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4a09      	ldr	r2, [pc, #36]	; (8005944 <prvHeapInit+0xbc>)
 800591e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005920:	4b09      	ldr	r3, [pc, #36]	; (8005948 <prvHeapInit+0xc0>)
 8005922:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005926:	601a      	str	r2, [r3, #0]
}
 8005928:	bf00      	nop
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20001234 	.word	0x20001234
 8005938:	200021d4 	.word	0x200021d4
 800593c:	200021dc 	.word	0x200021dc
 8005940:	200021e4 	.word	0x200021e4
 8005944:	200021e0 	.word	0x200021e0
 8005948:	200021e8 	.word	0x200021e8

0800594c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005954:	4b27      	ldr	r3, [pc, #156]	; (80059f4 <prvInsertBlockIntoFreeList+0xa8>)
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e002      	b.n	8005960 <prvInsertBlockIntoFreeList+0x14>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	429a      	cmp	r2, r3
 8005968:	d8f7      	bhi.n	800595a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4413      	add	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d108      	bne.n	800598e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	441a      	add	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d118      	bne.n	80059d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <prvInsertBlockIntoFreeList+0xac>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d00d      	beq.n	80059ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	441a      	add	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e008      	b.n	80059dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059ca:	4b0b      	ldr	r3, [pc, #44]	; (80059f8 <prvInsertBlockIntoFreeList+0xac>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	e003      	b.n	80059dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d002      	beq.n	80059ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059ea:	bf00      	nop
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc80      	pop	{r7}
 80059f2:	4770      	bx	lr
 80059f4:	200021d4 	.word	0x200021d4
 80059f8:	200021dc 	.word	0x200021dc

080059fc <__libc_init_array>:
 80059fc:	b570      	push	{r4, r5, r6, lr}
 80059fe:	2600      	movs	r6, #0
 8005a00:	4d0c      	ldr	r5, [pc, #48]	; (8005a34 <__libc_init_array+0x38>)
 8005a02:	4c0d      	ldr	r4, [pc, #52]	; (8005a38 <__libc_init_array+0x3c>)
 8005a04:	1b64      	subs	r4, r4, r5
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	42a6      	cmp	r6, r4
 8005a0a:	d109      	bne.n	8005a20 <__libc_init_array+0x24>
 8005a0c:	f000 f88c 	bl	8005b28 <_init>
 8005a10:	2600      	movs	r6, #0
 8005a12:	4d0a      	ldr	r5, [pc, #40]	; (8005a3c <__libc_init_array+0x40>)
 8005a14:	4c0a      	ldr	r4, [pc, #40]	; (8005a40 <__libc_init_array+0x44>)
 8005a16:	1b64      	subs	r4, r4, r5
 8005a18:	10a4      	asrs	r4, r4, #2
 8005a1a:	42a6      	cmp	r6, r4
 8005a1c:	d105      	bne.n	8005a2a <__libc_init_array+0x2e>
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a24:	4798      	blx	r3
 8005a26:	3601      	adds	r6, #1
 8005a28:	e7ee      	b.n	8005a08 <__libc_init_array+0xc>
 8005a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2e:	4798      	blx	r3
 8005a30:	3601      	adds	r6, #1
 8005a32:	e7f2      	b.n	8005a1a <__libc_init_array+0x1e>
 8005a34:	080063dc 	.word	0x080063dc
 8005a38:	080063dc 	.word	0x080063dc
 8005a3c:	080063dc 	.word	0x080063dc
 8005a40:	080063e0 	.word	0x080063e0

08005a44 <__itoa>:
 8005a44:	1e93      	subs	r3, r2, #2
 8005a46:	2b22      	cmp	r3, #34	; 0x22
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	d904      	bls.n	8005a58 <__itoa+0x14>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	461c      	mov	r4, r3
 8005a52:	700b      	strb	r3, [r1, #0]
 8005a54:	4620      	mov	r0, r4
 8005a56:	bd10      	pop	{r4, pc}
 8005a58:	2a0a      	cmp	r2, #10
 8005a5a:	d109      	bne.n	8005a70 <__itoa+0x2c>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	da07      	bge.n	8005a70 <__itoa+0x2c>
 8005a60:	232d      	movs	r3, #45	; 0x2d
 8005a62:	700b      	strb	r3, [r1, #0]
 8005a64:	2101      	movs	r1, #1
 8005a66:	4240      	negs	r0, r0
 8005a68:	4421      	add	r1, r4
 8005a6a:	f000 f81b 	bl	8005aa4 <__utoa>
 8005a6e:	e7f1      	b.n	8005a54 <__itoa+0x10>
 8005a70:	2100      	movs	r1, #0
 8005a72:	e7f9      	b.n	8005a68 <__itoa+0x24>

08005a74 <itoa>:
 8005a74:	f7ff bfe6 	b.w	8005a44 <__itoa>

08005a78 <memcpy>:
 8005a78:	440a      	add	r2, r1
 8005a7a:	4291      	cmp	r1, r2
 8005a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a80:	d100      	bne.n	8005a84 <memcpy+0xc>
 8005a82:	4770      	bx	lr
 8005a84:	b510      	push	{r4, lr}
 8005a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a8a:	4291      	cmp	r1, r2
 8005a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a90:	d1f9      	bne.n	8005a86 <memcpy+0xe>
 8005a92:	bd10      	pop	{r4, pc}

08005a94 <memset>:
 8005a94:	4603      	mov	r3, r0
 8005a96:	4402      	add	r2, r0
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d100      	bne.n	8005a9e <memset+0xa>
 8005a9c:	4770      	bx	lr
 8005a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa2:	e7f9      	b.n	8005a98 <memset+0x4>

08005aa4 <__utoa>:
 8005aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aa6:	b08b      	sub	sp, #44	; 0x2c
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	460b      	mov	r3, r1
 8005aac:	466e      	mov	r6, sp
 8005aae:	4c1d      	ldr	r4, [pc, #116]	; (8005b24 <__utoa+0x80>)
 8005ab0:	f104 0c20 	add.w	ip, r4, #32
 8005ab4:	4637      	mov	r7, r6
 8005ab6:	6820      	ldr	r0, [r4, #0]
 8005ab8:	6861      	ldr	r1, [r4, #4]
 8005aba:	3408      	adds	r4, #8
 8005abc:	c703      	stmia	r7!, {r0, r1}
 8005abe:	4564      	cmp	r4, ip
 8005ac0:	463e      	mov	r6, r7
 8005ac2:	d1f7      	bne.n	8005ab4 <__utoa+0x10>
 8005ac4:	7921      	ldrb	r1, [r4, #4]
 8005ac6:	6820      	ldr	r0, [r4, #0]
 8005ac8:	7139      	strb	r1, [r7, #4]
 8005aca:	1e91      	subs	r1, r2, #2
 8005acc:	2922      	cmp	r1, #34	; 0x22
 8005ace:	6038      	str	r0, [r7, #0]
 8005ad0:	f04f 0100 	mov.w	r1, #0
 8005ad4:	d904      	bls.n	8005ae0 <__utoa+0x3c>
 8005ad6:	7019      	strb	r1, [r3, #0]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4618      	mov	r0, r3
 8005adc:	b00b      	add	sp, #44	; 0x2c
 8005ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ae0:	1e58      	subs	r0, r3, #1
 8005ae2:	4684      	mov	ip, r0
 8005ae4:	fbb5 f7f2 	udiv	r7, r5, r2
 8005ae8:	fb02 5617 	mls	r6, r2, r7, r5
 8005aec:	3628      	adds	r6, #40	; 0x28
 8005aee:	446e      	add	r6, sp
 8005af0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005af4:	460c      	mov	r4, r1
 8005af6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005afa:	462e      	mov	r6, r5
 8005afc:	42b2      	cmp	r2, r6
 8005afe:	463d      	mov	r5, r7
 8005b00:	f101 0101 	add.w	r1, r1, #1
 8005b04:	d9ee      	bls.n	8005ae4 <__utoa+0x40>
 8005b06:	2200      	movs	r2, #0
 8005b08:	545a      	strb	r2, [r3, r1]
 8005b0a:	1919      	adds	r1, r3, r4
 8005b0c:	1aa5      	subs	r5, r4, r2
 8005b0e:	42aa      	cmp	r2, r5
 8005b10:	dae3      	bge.n	8005ada <__utoa+0x36>
 8005b12:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005b16:	780e      	ldrb	r6, [r1, #0]
 8005b18:	3201      	adds	r2, #1
 8005b1a:	7006      	strb	r6, [r0, #0]
 8005b1c:	f801 5901 	strb.w	r5, [r1], #-1
 8005b20:	e7f4      	b.n	8005b0c <__utoa+0x68>
 8005b22:	bf00      	nop
 8005b24:	080063b4 	.word	0x080063b4

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
